{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\MainPageComponents\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './MainPage.css';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst MainPage = () => {\n  _s();\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [decks, setDecks] = useState([]);\n  let navigate = useNavigate();\n  let dispatch = useDispatch();\n  const RedirectToDeckBuilder = () => {\n    fetch(serverURL + '/DeckBuilder/setupBuilder', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: userName\n    }).then(() => {\n      navigate(\"/DeckBuilder\");\n    });\n  };\n  const handleModalClose = deck => {\n    fetch(`${serverURL}/DeckBuilder/ValidateDeck/${userName}/${deck}`).then(res => res.json()).then(isDeckValid => {\n      console.log(isDeckValid);\n      fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: deck\n      }).then(() => {\n        let Sock = new SockJS(serverURL + '/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnect);\n        setIsSearching(true);\n        setIsModalOpen(false);\n      });\n    }).catch(console.error);\n  };\n  const RedirectToDuel = () => {\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`).then(res => res.json()).then(decksNames => {\n      setDecks(decksNames);\n    }).then(() => {\n      setIsModalOpen(true);\n    }).catch(console.error);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\n    stompClient.send('/app/findEnemy', {}, userName);\n  };\n  const onMessageReceived = payload => {\n    if (payload.body.includes(\"Found enemy\")) {\n      let gameID = payload.body.split(\":\")[1];\n      dispatch({\n        type: \"SET_GAME_ID\",\n        payload: gameID\n      });\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`).then(res => res.json()).then(deckData => {\n        fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(deckData)\n        }).then(() => {});\n      }).catch(console.error);\n    } else if (payload.body.includes(\"Get into duel page\")) {\n      navigate(\"/Duel\");\n    }\n  };\n  const [isSearching, setIsSearching] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPageBody\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose(\"\"),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), decks.map((deck, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '30px'\n        },\n        onClick: () => handleModalClose(deck),\n        children: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDeckBuilder,\n      children: \"Build your deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 88\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDuel,\n      children: \"Find enemy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 75\n    }, this), isSearching && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"kjj2gCnkALZSlkbJ9MrvgDtCTos=\", false, function () {\n  return [useSelector, useSelector, useNavigate, useDispatch];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useNavigate","SockJS","over","useSelector","useDispatch","Modal","jsxDEV","_jsxDEV","stompClient","MainPage","_s","userName","state","serverURL","isModalOpen","setIsModalOpen","decks","setDecks","navigate","dispatch","RedirectToDeckBuilder","fetch","method","headers","body","then","handleModalClose","deck","res","json","isDeckValid","console","log","Sock","connect","onConnect","setIsSearching","catch","error","RedirectToDuel","decksNames","subscribe","onMessageReceived","send","payload","includes","gameID","split","type","deckData","JSON","stringify","isSearching","className","children","isOpen","onRequestClose","style","content","width","height","background","fileName","_jsxFileName","lineNumber","columnNumber","map","index","fontSize","onClick","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/MainPageComponents/MainPage.tsx"],"sourcesContent":["import React,{useState} from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport {Card} from './../Interfaces/Card';\r\nimport './MainPage.css';\r\nimport Modal from 'react-modal';\r\n\r\nvar stompClient: any = null;\r\nconst MainPage = () => {\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const [decks, setDecks] = useState<string[]>([]);\r\n  let navigate = useNavigate();\r\n  let dispatch = useDispatch();\r\n  const RedirectToDeckBuilder = () =>{\r\n\r\n      fetch(serverURL + '/DeckBuilder/setupBuilder', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: userName,\r\n      }).then(() => {\r\n        navigate(\"/DeckBuilder\");\r\n      });\r\n  }\r\n\r\n\r\n  const handleModalClose= (deck:string) => {\r\n    fetch(`${serverURL}/DeckBuilder/ValidateDeck/${userName}/${deck}`)\r\n    .then((res) => res.json())\r\n    .then((isDeckValid: boolean) => {\r\n      console.log(isDeckValid);\r\n      fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:deck \r\n      }).then(() => {\r\n        let Sock = new SockJS(serverURL + '/ws');\r\n        stompClient = over(Sock);\r\n        stompClient.connect({}, onConnect);\r\n        setIsSearching(true);\r\n        setIsModalOpen(false);\r\n      });\r\n    }).catch(console.error);\r\n\r\n  }\r\n  const RedirectToDuel = () =>{\r\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`)\r\n    .then((res) => res.json())\r\n    .then((decksNames: string[]) => {\r\n      setDecks(decksNames);\r\n    }).then(() => {\r\n      setIsModalOpen(true);\r\n    })\r\n    .catch(console.error);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived );\r\n    stompClient.send('/app/findEnemy', {}, userName);\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    if(payload.body.includes(\"Found enemy\") ) {\r\n\r\n      let gameID = payload.body.split(\":\")[1]; \r\n      dispatch({type:\"SET_GAME_ID\", payload: gameID});\r\n\r\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`)\r\n        .then((res) => res.json())\r\n        .then((deckData: Card[]) => {\r\n\r\n          fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(deckData),\r\n          }).then(() => {\r\n          });\r\n        })\r\n        .catch(console.error);\r\n    }\r\n    else if(payload.body.includes(\"Get into duel page\")) {\r\n      navigate(\"/Duel\");\r\n    }\r\n  }\r\n\r\n  const [isSearching, setIsSearching] = useState<boolean>(false);\r\n\r\n\r\n  return (\r\n    <div className=\"MainPageBody\">\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose(\"\")} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose deck</h2>\r\n        {decks.map((deck, index) =>(\r\n          <button style={{fontSize: '30px',}} onClick= { () => handleModalClose(deck) }>{deck}</button>\r\n        ))}\r\n      </Modal>\r\n      <h1>Hello {userName}</h1>\r\n      <button className=\"btn\" onClick={RedirectToDeckBuilder}>Build your deck</button> <br />\r\n      <button className=\"btn\"onClick={RedirectToDuel}>Find enemy</button> <br />\r\n      {isSearching && <label className=\"spinner\"></label>}\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default MainPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}