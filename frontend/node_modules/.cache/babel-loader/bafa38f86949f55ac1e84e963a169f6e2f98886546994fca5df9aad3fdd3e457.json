{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { useSelector } from 'react-redux';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst DuelPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnBoard, setPointsOnBoard] = useState(0);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState([]);\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState([]);\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState([]);\n  const [enemyPointsOnBoard, setenemyPointsOnBoard] = useState(0);\n  const [enemyWonRounds, setenemyWonRounds] = useState(0);\n  const [isEnemyTurn, setisEnemyTurn] = useState(false);\n  const [didEnemyWon, setdidEnemyWon] = useState(false);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const [affectableRows, setAffectableRows] = useState([]);\n  const [enemyName, setEnemyName] = useState(\"\");\n  const gameID = useSelector(state => state.gameID);\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const connectToSocket = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnect);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived);\n  };\n  const onMessageReceived = payload => {\n    fetchCardsData();\n  };\n  useEffect(() => {\n    connectToSocket();\n    const controller = new AbortController();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`).then(res => res.text()).then(data => {\n      setEnemyName(data);\n      let userEnemy = data;\n      fetchData(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand, setCardsInHand);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`, cardsOnBoard, setCardsOnBoard);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow, setCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow, setCardsOnThirdRow);\n      fetchData(`${serverURL}/Duel/getBoardPoints/${userName}/${gameID}`, pointsOnBoard, setPointsOnBoard);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds, setWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon, setDidWon);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`, enemyCardsOnFirstRow, setenemyCardsOnFirstRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow, setenemyCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow, setCardsOnThirdRow2);\n      fetchData(`${serverURL}/Duel/getBoardPoints/${userEnemy}/${gameID}`, enemyPointsOnBoard, setenemyPointsOnBoard);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn, setisEnemyTurn);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds, setenemyWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon, setdidEnemyWon);\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  const [cardDragged, setCardDragged] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState(0);\n  const [cardAffected, setCardAffected] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    setCardAffected(card);\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const possibleAffectedRows = await response.json();\n      await makeMove(possibleAffectedRows);\n    });\n  }, [cardAffected]);\n  const makeMove = async possibleAffectedRows => {\n    if (possibleAffectedRows.length === 0) {\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\n      fetchCardsData();\n    } else {\n      setAffectableRows(possibleAffectedRows);\n      setIsRowsModalOpen(true);\n    }\n  };\n  const handleRowsModalClose = affectedRow => {\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\n    fetchCardsData();\n    setIsRowsModalOpen(false);\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    console.log(\"JEST COD\");\n    setCardDragged({\n      name: result.draggableId,\n      points: 0\n    });\n    setPostOnRowNumberOf(-1);\n    if (destination.droppableId === \"BoardRow1\") {\n      setPostOnRowNumberOf(0);\n    } else if (destination.droppableId === \"BoardRow2\") {\n      setPostOnRowNumberOf(1);\n    } else if (destination.droppableId === \"BoardRow3\") {\n      setPostOnRowNumberOf(2);\n    }\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const targetableCardsResponse = await response.json();\n      await ensure(targetableCardsResponse);\n    });\n  };\n  const ensure = async targetableCardsArg => {\n    if (targetableCardsArg.length === 0) {\n      setCardAffected({\n        name: \"noCard\",\n        points: 0\n      });\n    } else {\n      setTargetableCards(targetableCardsArg);\n      setIsModalOpen(true);\n    }\n  };\n  const playDraggedCard = async (postURL, cardDragged, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    console.log(cardDragged);\n    console.log(\"ff\");\n    fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    }).then(() => {\n      stompClient.send('/app/sendTrigger', {}, userName);\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    }).then(() => {\n      stompClient.send('/app/sendTrigger', {}, userName);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Let the battle begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => endRoundFor(userName),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerInfo\",\n        children: [\"|you: \", userName, \" | Did you won: \", didWon.toString(), \" | Won rounds: \", wonRounds, \" | Is your turn: \", isTurnOfPlayer1.toString(), \" |\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose({\n        name: \"Not\",\n        points: 1\n      }),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a card to target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          name: card.name,\n          points: card.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRowsModalOpen,\n      onRequestClose: () => handleRowsModalClose(-1),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a row to traget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), affectableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '30px'\n        },\n        onClick: () => {\n          handleRowsModalClose(row);\n        },\n        children: row + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, userName),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: () => {},\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnFirstRow,\n        pointsOnRow: enemyPointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnSecondRow,\n        pointsOnRow: enemyPointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnThirdRow,\n        pointsOnRow: enemyPointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerInfo\",\n      children: [\"|enemy: \", enemyName, \" | Did won: \", didEnemyWon.toString(), \" | Won rounds: \", enemyWonRounds, \" | Is turn: \", isEnemyTurn.toString(), \" |\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"p2BtZTn1HarScWuTnnCv4bqaWAQ=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","Modal","CardComponent","useSelector","SockJS","over","jsxDEV","_jsxDEV","stompClient","DuelPage","_s","refresh","setRefresh","isModalOpen","setIsModalOpen","isRowsModalOpen","setIsRowsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnBoard","setPointsOnBoard","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","enemyCardsOnFirstRow","setenemyCardsOnFirstRow","enemyCardsOnSecondRow","setenemyCardsOnSecondRow","enemyCardsOnThirdRow","setCardsOnThirdRow2","enemyPointsOnBoard","setenemyPointsOnBoard","enemyWonRounds","setenemyWonRounds","isEnemyTurn","setisEnemyTurn","didEnemyWon","setdidEnemyWon","targetableCards","setTargetableCards","affectableRows","setAffectableRows","enemyName","setEnemyName","gameID","state","userName","serverURL","connectToSocket","Sock","connect","onConnect","subscribe","onMessageReceived","payload","fetchCardsData","controller","AbortController","abort","fetchData","url","data","setter","fetch","then","res","json","catch","console","error","text","userEnemy","cardDragged","setCardDragged","name","points","postOnRowNumberOf","setPostOnRowNumberOf","cardAffected","setCardAffected","handleModalClose","card","method","headers","body","JSON","stringify","response","possibleAffectedRows","makeMove","length","playDraggedCard","handleRowsModalClose","affectedRow","onDragEndOf","result","player","destination","droppableId","log","draggableId","targetableCardsResponse","ensure","targetableCardsArg","postURL","cardTargetted","args","send","endRoundFor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","toString","isOpen","onRequestClose","style","content","width","height","background","map","index","row","fontSize","onDragEnd","cardsOnRow","pointsOnRow","rowDroppableId","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\n\r\nvar stompClient:any = null;\r\nconst DuelPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard, setPointsOnBoard] = useState<number>(0);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n\r\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [enemyPointsOnBoard, setenemyPointsOnBoard] = useState<number>(0);\r\n  const [enemyWonRounds, setenemyWonRounds] = useState<number>(0);\r\n  const [isEnemyTurn, setisEnemyTurn] = useState<boolean>(false);\r\n  const [didEnemyWon, setdidEnemyWon] = useState<boolean>(false);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n  const [affectableRows, setAffectableRows] = useState<number[]>([]);\r\n  const [enemyName, setEnemyName] = useState<string>(\"\");\r\n\r\n\r\n\r\n  const gameID = useSelector<StateData, string>((state) => state.gameID);\r\n  const userName= useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n\r\n\r\n\r\n  const connectToSocket= () =>{\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnect);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived );\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    fetchCardsData();\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    connectToSocket();\r\n    const controller = new AbortController();\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`)\r\n      .then((res) => res.text())\r\n      .then((data: string) => {\r\n        setEnemyName(data);\r\n        let userEnemy:string = data;\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand ,setCardsInHand);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`,cardsOnBoard ,setCardsOnBoard);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n        fetchData<number>(`${serverURL}/Duel/getBoardPoints/${userName}/${gameID}`, pointsOnBoard ,setPointsOnBoard);\r\n       fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds ,setWonRounds);\r\n       fetchData<boolean>(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon ,setDidWon);\r\n\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`,enemyCardsOnFirstRow ,setenemyCardsOnFirstRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow,setenemyCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow ,setCardsOnThirdRow2);\r\n        fetchData<number>(`${serverURL}/Duel/getBoardPoints/${userEnemy}/${gameID}`, enemyPointsOnBoard ,setenemyPointsOnBoard);\r\n       fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn ,setisEnemyTurn);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds ,setenemyWonRounds);\r\n       fetchData<boolean>(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon ,setdidEnemyWon);\r\n      })\r\n      .catch(console.error);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n\r\n\r\n  const [cardDragged, setCardDragged] = useState<Card>({name: \"points\", points: 0});\r\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState<number>(0);\r\n  const [cardAffected, setCardAffected] = useState<Card>({name: \"points\", points: 0});\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    setCardAffected(card);\r\n  };\r\n  useEffect(() => {\r\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const possibleAffectedRows = await response.json();\r\n\r\n      await makeMove(possibleAffectedRows);\r\n\r\n    });\r\n\r\n  }, [cardAffected]);\r\n  \r\n\r\n  const makeMove = async (possibleAffectedRows: number[]) => {\r\n    if(possibleAffectedRows.length === 0) {\r\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\r\n      fetchCardsData();\r\n    } \r\n    else {\r\n      setAffectableRows(possibleAffectedRows);\r\n      setIsRowsModalOpen(true);\r\n    } \r\n\r\n  }\r\n  const handleRowsModalClose = (affectedRow: number) => {\r\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\r\n    fetchCardsData();\r\n    setIsRowsModalOpen(false);\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n    console.log(\"JEST COD\");\r\n\r\n    setCardDragged({name: result.draggableId, points: 0});\r\n    setPostOnRowNumberOf(-1);\r\n    if(destination.droppableId === \"BoardRow1\"){\r\n      setPostOnRowNumberOf(0);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow2\"){\r\n      setPostOnRowNumberOf(1);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow3\"){\r\n      setPostOnRowNumberOf(2);\r\n    }\r\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const targetableCardsResponse= await response.json();\r\n\r\n      await ensure(targetableCardsResponse);\r\n\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  const ensure = async (targetableCardsArg:Card[]) => {\r\n\r\n      if(targetableCardsArg.length === 0) {\r\n        setCardAffected({name: \"noCard\", points:0});\r\n      }\r\n      else {\r\n        setTargetableCards(targetableCardsArg);\r\n        setIsModalOpen(true);\r\n      }\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardDragged:Card, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    console.log(cardDragged);\r\n    console.log(\"ff\");\r\n    fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      }).then( () => {\r\n        stompClient.send('/app/sendTrigger', {}, userName);\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    }).then( () => {\r\n        stompClient.send('/app/sendTrigger', {}, userName);\r\n    });\r\n}\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <div>\r\n        <label>Let the battle begin</label>\r\n        <button className=\"btn\"onClick={fetchCardsData}>Load data</button>\r\n      </div>\r\n\r\n      <div>\r\n        <button className=\"btn\"onClick={() => endRoundFor(userName)}>End round</button>\r\n        <div className=\"playerInfo\">|you: {userName} | Did you won: {didWon.toString()} | Won rounds: {wonRounds} | Is your turn: {isTurnOfPlayer1.toString()} |</div>\r\n      </div>\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose({name: \"Not\", points: 1})}style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a card to target</h2>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent  name={card.name} points={card.points}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isRowsModalOpen} onRequestClose={() => handleRowsModalClose(-1)} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a row to traget</h2>\r\n        {affectableRows.map((row, index) =>(\r\n          <button style={{fontSize: '30px',}} onClick= { () => {handleRowsModalClose(row)} }>{row + 1}</button>\r\n        ))}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, userName)}>\r\n        <HandComponent cardsInHand = {cardsInHand}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n      \r\n      <DragDropContext onDragEnd = {() => {}}>\r\n        <RowComponent cardsOnRow = {enemyCardsOnFirstRow} pointsOnRow={enemyPointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnSecondRow} pointsOnRow={enemyPointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnThirdRow} pointsOnRow={enemyPointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n      </DragDropContext>\r\n      \r\n      \r\n      <div className=\"playerInfo\">|enemy: {enemyName} | Did won: {didEnemyWon.toString()} | Won rounds: {enemyWonRounds} | Is turn: {isEnemyTurn.toString()} |</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}