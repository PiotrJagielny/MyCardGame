{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { useSelector } from 'react-redux';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst DuelPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnBoard, setPointsOnBoard] = useState(0);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [cardsInHand2, setCardsInHand2] = useState([]);\n  const [cardsOnBoard2, setCardsOnBoard2] = useState([]);\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState([]);\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState([]);\n  const [pointsOnBoard2, setPointsOnBoard2] = useState(0);\n  const [wonRounds2, setWonRounds2] = useState(0);\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState(false);\n  const [didWon2, setDidWon2] = useState(false);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const [affectableRows, setAffectableRows] = useState([]);\n  const [enemyName, setEnemyName] = useState(\"\");\n  const gameID = useSelector(state => state.gameID);\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const connectToSocket = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnect);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived);\n  };\n  const onMessageReceived = payload => {\n    console.log(\"RECEIVED\");\n    fetchCardsData();\n  };\n  useEffect(() => {\n    connectToSocket();\n    const controller = new AbortController();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  let secondPlayer = \"second\";\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`).then(res => res.text()).then(data => {\n      setEnemyName(data);\n      let userEnemy = data;\n      console.log(userEnemy);\n      fetchData(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand, setCardsInHand);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`, cardsOnBoard, setCardsOnBoard);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow, setCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow, setCardsOnThirdRow);\n      fetchData(`${serverURL}/Duel/getBoardPoints/${userName}/${gameID}`, pointsOnBoard, setPointsOnBoard);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds, setWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon, setDidWon);\n      fetchData(`${serverURL}/Duel/getHandCards/${userEnemy}/${gameID}`, cardsInHand2, setCardsInHand2);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`, cardsOnBoard2, setCardsOnBoard2);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, cardsOnSecondRow2, setCardsOnSecondRow2);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, cardsOnThirdRow2, setCardsOnThirdRow2);\n      fetchData(`${serverURL}/Duel/getBoardPoints/${userEnemy}/${gameID}`, pointsOnBoard2, setPointsOnBoard2);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isTurnOfPlayer2, setIsTurnOfPlayer2);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, wonRounds2, setWonRounds2);\n      fetchData(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didWon2, setDidWon2);\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  const [cardDragged, setCardDragged] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState(0);\n  const [playerPlayer, setPlayerPlayer] = useState(\"none\");\n  const [cardAffected, setCardAffected] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    setCardAffected(card);\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const possibleAffectedRows = await response.json();\n      await makeMove(possibleAffectedRows);\n    });\n  }, [cardAffected]);\n  const makeMove = async possibleAffectedRows => {\n    if (possibleAffectedRows.length === 0) {\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\n      console.log(\"card played\");\n      fetchCardsData();\n    } else {\n      setAffectableRows(possibleAffectedRows);\n      setIsRowsModalOpen(true);\n    }\n  };\n  const handleRowsModalClose = affectedRow => {\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\n    fetchCardsData();\n    setIsRowsModalOpen(false);\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    setCardDragged({\n      name: result.draggableId,\n      points: 0\n    });\n    setPostOnRowNumberOf(-1);\n    if (destination.droppableId === \"BoardRow1\") {\n      setPostOnRowNumberOf(0);\n    } else if (destination.droppableId === \"BoardRow2\") {\n      setPostOnRowNumberOf(1);\n    } else if (destination.droppableId === \"BoardRow3\") {\n      setPostOnRowNumberOf(2);\n    }\n    setPlayerPlayer(userName);\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const targetableCardsResponse = await response.json();\n      await ensure(targetableCardsResponse);\n    });\n  }, [playerPlayer]);\n  const ensure = async targetableCardsArg => {\n    if (targetableCardsArg.length === 0) {\n      setCardAffected({\n        name: \"noCard\",\n        points: 0\n      });\n    } else {\n      setTargetableCards(targetableCardsArg);\n      setIsModalOpen(true);\n    }\n  };\n  const playDraggedCard = async (postURL, cardDragged, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    await fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    }).then(() => {\n      stompClient.send('/app/sendTrigger', {}, userName);\n      console.log(\"SENT\");\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Let the battle begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => endRoundFor(userName),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerInfo\",\n        children: [\"|you: \", userName, \" | Did you won: \", didWon.toString(), \" | Won rounds: \", wonRounds, \" | Is your turn: \", isTurnOfPlayer1.toString(), \" |\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose({\n        name: \"Not\",\n        points: 1\n      }),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a card to target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          name: card.name,\n          points: card.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRowsModalOpen,\n      onRequestClose: () => handleRowsModalClose(-1),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a row to traget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), affectableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '30px'\n        },\n        onClick: () => {\n          handleRowsModalClose(row);\n        },\n        children: row + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, userName),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, secondPlayer),\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerInfo\",\n      children: [\"|enemy: \", enemyName, \" | Did won: \", didWon2.toString(), \" | Won rounds: \", wonRounds2, \" | Is turn: \", isTurnOfPlayer2.toString(), \" |\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"jP7dB8Ql3c/ypJ7ksFSUi+FbcY4=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","Modal","CardComponent","useSelector","SockJS","over","jsxDEV","_jsxDEV","stompClient","DuelPage","_s","refresh","setRefresh","isModalOpen","setIsModalOpen","isRowsModalOpen","setIsRowsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnBoard","setPointsOnBoard","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","cardsInHand2","setCardsInHand2","cardsOnBoard2","setCardsOnBoard2","cardsOnSecondRow2","setCardsOnSecondRow2","cardsOnThirdRow2","setCardsOnThirdRow2","pointsOnBoard2","setPointsOnBoard2","wonRounds2","setWonRounds2","isTurnOfPlayer2","setIsTurnOfPlayer2","didWon2","setDidWon2","targetableCards","setTargetableCards","affectableRows","setAffectableRows","enemyName","setEnemyName","gameID","state","userName","serverURL","connectToSocket","Sock","connect","onConnect","subscribe","onMessageReceived","payload","console","log","fetchCardsData","controller","AbortController","abort","secondPlayer","fetchData","url","data","setter","fetch","then","res","json","catch","error","text","userEnemy","cardDragged","setCardDragged","name","points","postOnRowNumberOf","setPostOnRowNumberOf","playerPlayer","setPlayerPlayer","cardAffected","setCardAffected","handleModalClose","card","method","headers","body","JSON","stringify","response","possibleAffectedRows","makeMove","length","playDraggedCard","handleRowsModalClose","affectedRow","onDragEndOf","result","player","destination","droppableId","draggableId","targetableCardsResponse","ensure","targetableCardsArg","postURL","cardTargetted","args","send","endRoundFor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","toString","isOpen","onRequestClose","style","content","width","height","background","map","index","row","fontSize","onDragEnd","cardsOnRow","pointsOnRow","rowDroppableId","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\n\r\nvar stompClient:any = null;\r\nconst DuelPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard, setPointsOnBoard] = useState<number>(0);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n  const [cardsInHand2, setCardsInHand2] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard2, setCardsOnBoard2] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard2, setPointsOnBoard2] = useState<number>(0);\r\n  const [wonRounds2, setWonRounds2] = useState<number>(0);\r\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState<boolean>(false);\r\n  const [didWon2, setDidWon2] = useState<boolean>(false);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n  const [affectableRows, setAffectableRows] = useState<number[]>([]);\r\n  const [enemyName, setEnemyName] = useState<string>(\"\");\r\n\r\n\r\n\r\n  const gameID = useSelector<StateData, string>((state) => state.gameID);\r\n  const userName= useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n\r\n\r\n\r\n  const connectToSocket= () =>{\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnect);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived );\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    console.log(\"RECEIVED\");\r\n    fetchCardsData();\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    connectToSocket();\r\n    const controller = new AbortController();\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n  let secondPlayer:string = \"second\";\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`)\r\n      .then((res) => res.text())\r\n      .then((data: string) => {\r\n        setEnemyName(data);\r\n        let userEnemy:string = data;\r\n        console.log(userEnemy);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand ,setCardsInHand);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`,cardsOnBoard ,setCardsOnBoard);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n        fetchData<number>(`${serverURL}/Duel/getBoardPoints/${userName}/${gameID}`, pointsOnBoard ,setPointsOnBoard);\r\n       fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds ,setWonRounds);\r\n       fetchData<boolean>(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon ,setDidWon);\r\n\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userEnemy}/${gameID}`, cardsInHand2 ,setCardsInHand2);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`,cardsOnBoard2 ,setCardsOnBoard2);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, cardsOnSecondRow2 ,setCardsOnSecondRow2);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, cardsOnThirdRow2 ,setCardsOnThirdRow2);\r\n        fetchData<number>(`${serverURL}/Duel/getBoardPoints/${userEnemy}/${gameID}`, pointsOnBoard2 ,setPointsOnBoard2);\r\n       fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isTurnOfPlayer2 ,setIsTurnOfPlayer2);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, wonRounds2 ,setWonRounds2);\r\n       fetchData<boolean>(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didWon2 ,setDidWon2);\r\n      })\r\n      .catch(console.error);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n\r\n\r\n  const [cardDragged, setCardDragged] = useState<Card>({name: \"points\", points: 0});\r\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState<number>(0);\r\n  const [playerPlayer,setPlayerPlayer] = useState<string>(\"none\");\r\n  const [cardAffected, setCardAffected] = useState<Card>({name: \"points\", points: 0});\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    setCardAffected(card);\r\n  };\r\n  useEffect(() => {\r\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const possibleAffectedRows = await response.json();\r\n\r\n      await makeMove(possibleAffectedRows);\r\n\r\n    });\r\n\r\n  }, [cardAffected]);\r\n  \r\n\r\n  const makeMove = async (possibleAffectedRows: number[]) => {\r\n    if(possibleAffectedRows.length === 0) {\r\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\r\n      console.log(\"card played\");\r\n      fetchCardsData();\r\n    } \r\n    else {\r\n      setAffectableRows(possibleAffectedRows);\r\n      setIsRowsModalOpen(true);\r\n    } \r\n\r\n  }\r\n  const handleRowsModalClose = (affectedRow: number) => {\r\n    \r\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardDragged, cardAffected);\r\n    fetchCardsData();\r\n    setIsRowsModalOpen(false);\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    setCardDragged({name: result.draggableId, points: 0});\r\n    setPostOnRowNumberOf(-1);\r\n    if(destination.droppableId === \"BoardRow1\"){\r\n      setPostOnRowNumberOf(0);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow2\"){\r\n      setPostOnRowNumberOf(1);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow3\"){\r\n      setPostOnRowNumberOf(2);\r\n    }\r\n    setPlayerPlayer(userName);\r\n\r\n\r\n\r\n  }\r\n  useEffect(() => {\r\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const targetableCardsResponse= await response.json();\r\n\r\n      await ensure(targetableCardsResponse);\r\n\r\n    });\r\n\r\n  }, [playerPlayer]);\r\n  const ensure = async (targetableCardsArg:Card[]) => {\r\n\r\n      if(targetableCardsArg.length === 0) {\r\n        setCardAffected({name: \"noCard\", points:0});\r\n      }\r\n      else {\r\n        setTargetableCards(targetableCardsArg);\r\n        setIsModalOpen(true);\r\n      }\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardDragged:Card, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    await fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      }).then( () => {\r\n        stompClient.send('/app/sendTrigger', {}, userName);\r\n        console.log(\"SENT\");\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    });\r\n}\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <div>\r\n        <label>Let the battle begin</label>\r\n        <button className=\"btn\"onClick={fetchCardsData}>Load data</button>\r\n      </div>\r\n\r\n      <div>\r\n        <button className=\"btn\"onClick={() => endRoundFor(userName)}>End round</button>\r\n        <div className=\"playerInfo\">|you: {userName} | Did you won: {didWon.toString()} | Won rounds: {wonRounds} | Is your turn: {isTurnOfPlayer1.toString()} |</div>\r\n      </div>\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose({name: \"Not\", points: 1})}style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a card to target</h2>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent  name={card.name} points={card.points}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isRowsModalOpen} onRequestClose={() => handleRowsModalClose(-1)} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a row to traget</h2>\r\n        {affectableRows.map((row, index) =>(\r\n          <button style={{fontSize: '30px',}} onClick= { () => {handleRowsModalClose(row)} }>{row + 1}</button>\r\n        ))}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, userName)}>\r\n        <HandComponent cardsInHand = {cardsInHand}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n      \r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, secondPlayer)}>\r\n        <RowComponent cardsOnRow = {cardsOnBoard2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        \r\n      </DragDropContext>\r\n      \r\n      \r\n      <div className=\"playerInfo\">|enemy: {enemyName} | Did won: {didWon2.toString()} | Won rounds: {wonRounds2} | Is turn: {isTurnOfPlayer2.toString()} |</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}