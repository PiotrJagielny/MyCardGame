{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DuelPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnBoard, setPointsOnBoard] = useState(0);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [cardsInHand2, setCardsInHand2] = useState([]);\n  const [cardsOnBoard2, setCardsOnBoard2] = useState([]);\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState([]);\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState([]);\n  const [pointsOnBoard2, setPointsOnBoard2] = useState(0);\n  const [wonRounds2, setWonRounds2] = useState(0);\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState(false);\n  const [didWon2, setDidWon2] = useState(false);\n  const [deckData, setDeckData] = useState([]);\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck').then(res => res.json()).then(deckData => {\n      setDeckData(deckData);\n    }).catch(console.error);\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  let firstPlayer = \"first\";\n  let secondPlayer = \"second\";\n  useEffect(() => {\n    const controller = new AbortController();\n    if (deckData.length > 0) {\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(deckData),\n        signal: controller.signal\n      });\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [deckData]);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetchData(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand, setCardsInHand);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`, cardsOnBoard, setCardsOnBoard);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow, setCardsOnSecondRow);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow, setCardsOnThirdRow);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard, setPointsOnBoard);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds, setWonRounds);\n    fetchData(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon, setDidWon);\n    fetchData(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2, setCardsInHand2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`, cardsOnBoard2, setCardsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2, setCardsOnSecondRow2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2, setCardsOnThirdRow2);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2, setPointsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2, setIsTurnOfPlayer2);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2, setWonRounds2);\n    fetchData(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2, setDidWon2);\n    setRefresh(true);\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    let cardDragged = {\n      name: result.draggableId,\n      points: 0\n    };\n    let postOnRowNumberOf = -1;\n    if (destination.droppableId === \"BoardRow1\") {\n      postOnRowNumberOf = 0;\n    } else if (destination.droppableId === \"BoardRow2\") {\n      postOnRowNumberOf = 1;\n    } else if (destination.droppableId === \"BoardRow3\") {\n      postOnRowNumberOf = 2;\n    }\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\n    fetchCardsData();\n  };\n  const playDraggedCard = (postURL, cardDragged) => {\n    fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Let the battle begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 44\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => endRoundFor(firstPlayer),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Did you won: \", didWon.toString(), \"|\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Won rounds: \", wonRounds, \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Is your turn: \", isTurnOfPlayer1.toString(), \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, firstPlayer),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, secondPlayer),\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Is your turn: \", isTurnOfPlayer2.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Won rounds \", wonRounds2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Did you won \", didWon2.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => endRoundFor(secondPlayer),\n      children: \"End round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"IEOrrfnRFcdKdf8wG5UsTXGer6s=\");\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","jsxDEV","_jsxDEV","DuelPage","_s","refresh","setRefresh","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnBoard","setPointsOnBoard","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","cardsInHand2","setCardsInHand2","cardsOnBoard2","setCardsOnBoard2","cardsOnSecondRow2","setCardsOnSecondRow2","cardsOnThirdRow2","setCardsOnThirdRow2","pointsOnBoard2","setPointsOnBoard2","wonRounds2","setWonRounds2","isTurnOfPlayer2","setIsTurnOfPlayer2","didWon2","setDidWon2","deckData","setDeckData","controller","AbortController","fetch","then","res","json","catch","console","error","abort","firstPlayer","secondPlayer","length","method","headers","body","JSON","stringify","signal","fetchData","url","data","setter","fetchCardsData","onDragEndOf","result","player","destination","droppableId","cardDragged","name","draggableId","points","postOnRowNumberOf","playDraggedCard","postURL","endRoundFor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toString","onDragEnd","cardsOnRow","pointsOnRow","rowDroppableId","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\n\r\nconst DuelPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard, setPointsOnBoard] = useState<number>(0);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n  const [cardsInHand2, setCardsInHand2] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard2, setCardsOnBoard2] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard2, setPointsOnBoard2] = useState<number>(0);\r\n  const [wonRounds2, setWonRounds2] = useState<number>(0);\r\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState<boolean>(false);\r\n  const [didWon2, setDidWon2] = useState<boolean>(false);\r\n\r\n\r\n\r\n  const [deckData, setDeckData] = useState<Card[]>([]);\r\n\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck')\r\n      .then((res) => res.json())\r\n      .then((deckData: Card[]) => {\r\n        setDeckData(deckData);\r\n      })\r\n      .catch(console.error);\r\n\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n  let firstPlayer:string = \"first\";\r\n  let secondPlayer:string = \"second\";\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    if (deckData.length > 0) {\r\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(deckData),\r\n        signal: controller.signal\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n\r\n  }, [deckData]);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand ,setCardsInHand);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`,cardsOnBoard ,setCardsOnBoard);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard ,setPointsOnBoard);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds ,setWonRounds);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon ,setDidWon);\r\n\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2 ,setCardsInHand2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`,cardsOnBoard2 ,setCardsOnBoard2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2 ,setCardsOnSecondRow2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2 ,setCardsOnThirdRow2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2 ,setPointsOnBoard2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2 ,setIsTurnOfPlayer2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2 ,setWonRounds2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2 ,setDidWon2);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    let cardDragged: Card = {name: result.draggableId, points: 0};\r\n    let postOnRowNumberOf:number = -1;\r\n\r\n    if(destination.droppableId === \"BoardRow1\"){\r\n      postOnRowNumberOf = 0;\r\n    }\r\n    else if(destination.droppableId === \"BoardRow2\"){\r\n      postOnRowNumberOf = 1;\r\n    }\r\n    else if(destination.droppableId === \"BoardRow3\"){\r\n      postOnRowNumberOf = 2;\r\n    }\r\n\r\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\r\n    fetchCardsData();\r\n  }\r\n\r\n  const playDraggedCard = (postURL: string, cardDragged:Card) =>{\r\n    fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(cardDragged)\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    });\r\n}\r\n\r\n  return (\r\n    \r\n    <div>\r\n      \r\n      <div>\r\n        <label>Let the battle begin</label><br/>\r\n        <button onClick={fetchCardsData}>Load data</button>\r\n        <button onClick={() => endRoundFor(firstPlayer)}>End round</button>\r\n        <label> |Did you won: {didWon.toString()}|</label>\r\n        <label> |Won rounds: {wonRounds}| </label>\r\n        <label> |Is your turn: {isTurnOfPlayer1.toString()}| </label>\r\n      </div>\r\n      \r\n      \r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, firstPlayer)}>\r\n        <HandComponent cardsInHand = {cardsInHand}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n      \r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, secondPlayer)}>\r\n        <RowComponent cardsOnRow = {cardsOnBoard2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        \r\n        <HandComponent cardsInHand = {cardsInHand2}></HandComponent>\r\n      </DragDropContext>\r\n      \r\n      <label>Is your turn: {isTurnOfPlayer2.toString()}</label>\r\n      <p>Won rounds {wonRounds2}</p>\r\n      <p>Did you won {didWon2.toString()}</p>\r\n      <button onClick={() => endRoundFor(secondPlayer)}>End round</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}