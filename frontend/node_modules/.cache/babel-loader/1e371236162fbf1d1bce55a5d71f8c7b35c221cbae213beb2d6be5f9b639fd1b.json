{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DeckBuildingComponents\\\\DecksManager.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './DecksManager.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DecksManager = _ref => {\n  _s();\n  let {\n    OnDecksSwitched,\n    addMessage\n  } = _ref;\n  const [refresh, setRefresh] = useState(false);\n  const [decksNames, setDecksNames] = useState([]);\n  const [inputNewDeckName, setNewDeckName] = useState();\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const fetchDecksNames = () => {\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`).then(res => res.json()).then(decksNames => {\n      setDecksNames(decksNames);\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchDecksNames();\n    return () => {\n      controller.abort();\n    };\n  }, [userName]);\n  const handleSelectDeckPostRequest = selectedDeckName => {\n    const response = fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: selectedDeckName\n    });\n    OnDecksSwitched();\n  };\n  const handleNewDeckPostRequest = () => {\n    const response = fetch(`${serverURL}/DeckBuilder/CreateDeck/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: inputNewDeckName\n    });\n    fetchDecksNames();\n  };\n  const handleDeckDeletePostRequest = async () => {\n    const response = await fetch(`${serverURL}/DeckBuilder/DeleteDeck/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: \"\"\n    });\n    addMessage(await response.text());\n    fetchDecksNames();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"decks\",\n      children: decksNames.map(name => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deckBtn\",\n          onClick: () => handleSelectDeckPostRequest(name),\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CreateDeck\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputNewDeckName,\n        onChange: event => {\n          setNewDeckName(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitNewDeck\",\n        onClick: handleNewDeckPostRequest,\n        children: \"Create Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DeleteDeck\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitDeckDelete\",\n        onClick: handleDeckDeletePostRequest,\n        children: \"Delete current deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(DecksManager, \"UNQfR/vRtmLTjszNnhciBYK4ozA=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = DecksManager;\nvar _c;\n$RefreshReg$(_c, \"DecksManager\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","jsxDEV","_jsxDEV","DecksManager","_ref","_s","OnDecksSwitched","addMessage","refresh","setRefresh","decksNames","setDecksNames","inputNewDeckName","setNewDeckName","userName","state","serverURL","fetchDecksNames","fetch","then","res","json","catch","console","error","controller","AbortController","abort","handleSelectDeckPostRequest","selectedDeckName","response","method","headers","body","handleNewDeckPostRequest","handleDeckDeletePostRequest","text","children","className","map","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","event","target","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DeckBuildingComponents/DecksManager.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport './DecksManager.css';\r\n\r\ninterface Props{\r\n    OnDecksSwitched: () => void;\r\n    addMessage: (message:string) => void;\r\n}\r\n\r\nexport const DecksManager: React.FC<Props> = ({OnDecksSwitched, addMessage}) => {\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  const [decksNames, setDecksNames] = useState<string[]>([]);\r\n  const [inputNewDeckName, setNewDeckName] = useState<string>();\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n  const fetchDecksNames = () => {\r\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`)\r\n    .then((res) => res.json())\r\n    .then((decksNames: string[]) => {\r\n      setDecksNames(decksNames);\r\n    })\r\n    .catch(console.error);\r\n    setRefresh(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    fetchDecksNames();\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [userName]);\r\n\r\n\r\n  const handleSelectDeckPostRequest = (selectedDeckName: string) => {\r\n    const response = fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: selectedDeckName\r\n    });\r\n    OnDecksSwitched();\r\n  }\r\n\r\n  const handleNewDeckPostRequest = () => {\r\n\r\n    const response = fetch(`${serverURL}/DeckBuilder/CreateDeck/${userName}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: inputNewDeckName\r\n    });\r\n\r\n    fetchDecksNames();\r\n  }\r\n\r\n  const handleDeckDeletePostRequest = async () => {\r\n    const response = await fetch(`${serverURL}/DeckBuilder/DeleteDeck/${userName}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: \"\"\r\n    });\r\n    addMessage(await response.text());\r\n    fetchDecksNames();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <ul className=\"decks\">\r\n            {decksNames.map(name => (\r\n              <li>\r\n                <button className=\"deckBtn\" onClick={() => (handleSelectDeckPostRequest(name))}>{name}</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className=\"CreateDeck\">\r\n            <input type=\"text\" value={inputNewDeckName} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {setNewDeckName(event.target.value)}} />\r\n            <button className=\"submitNewDeck\" onClick={handleNewDeckPostRequest}>Create Deck</button>\r\n          </div>\r\n          <div className = \"DeleteDeck\">\r\n              <button className=\"submitDeckDelete\" onClick={handleDeckDeletePostRequest}>Delete current deck</button>\r\n          </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}