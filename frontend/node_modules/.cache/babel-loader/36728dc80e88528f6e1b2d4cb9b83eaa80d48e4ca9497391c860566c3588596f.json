{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\MainPageComponents\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './MainPage.css';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst MainPage = () => {\n  _s();\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [decks, setDecks] = useState([]);\n  let navigate = useNavigate();\n  let dispatch = useDispatch();\n  const RedirectToDeckBuilder = () => {\n    console.log(serverURL);\n    fetch(serverURL + '/DeckBuilder/setupBuilder', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: userName\n    }).then(() => {\n      navigate(\"/DeckBuilder\");\n    });\n  };\n  const handleModalClose = deck => {\n    fetch(`${serverURL}/DeckBuilder/ValidateDeck/${userName}/${deck}`).then(res => res.json()).then(isDeckValid => {\n      if (isDeckValid) {\n        switchDecks(deck);\n      } else {\n        window.alert(\"This deck is not valid\");\n      }\n    }).catch(console.error);\n  };\n  const switchDecks = deck => {\n    fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: deck\n    }).then(() => {\n      let Sock = new SockJS(serverURL + '/ws');\n      stompClient = over(Sock);\n      stompClient.connect({}, onConnect);\n      setIsSearching(true);\n      setIsModalOpen(false);\n    });\n  };\n  const RedirectToDuel = () => {\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`).then(res => res.json()).then(decksNames => {\n      setDecks(decksNames);\n    }).then(() => {\n      setIsModalOpen(true);\n    }).catch(console.error);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\n    stompClient.send('/app/findEnemy', {}, userName);\n  };\n  const onMessageReceived = payload => {\n    if (payload.body.includes(\"Found enemy\")) {\n      let gameID = payload.body.split(\":\")[1];\n      dispatch({\n        type: \"SET_GAME_ID\",\n        payload: gameID\n      });\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`).then(res => res.json()).then(deckData => {\n        fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(deckData)\n        }).then(() => {});\n      }).catch(console.error);\n    } else if (payload.body.includes(\"Get into duel page\")) {\n      navigate(\"/Duel\");\n    }\n  };\n  const [isSearching, setIsSearching] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPageBody\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose(\"\"),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), decks.map((deck, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => handleModalClose(deck),\n        children: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDeckBuilder,\n      children: \"Build your deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 88\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDuel,\n      children: \"Find enemy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 75\n    }, this), isSearching && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"kjj2gCnkALZSlkbJ9MrvgDtCTos=\", false, function () {\n  return [useSelector, useSelector, useNavigate, useDispatch];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useNavigate","SockJS","over","useSelector","useDispatch","Modal","jsxDEV","_jsxDEV","stompClient","MainPage","_s","userName","state","serverURL","isModalOpen","setIsModalOpen","decks","setDecks","navigate","dispatch","RedirectToDeckBuilder","console","log","fetch","method","headers","body","then","handleModalClose","deck","res","json","isDeckValid","switchDecks","window","alert","catch","error","Sock","connect","onConnect","setIsSearching","RedirectToDuel","decksNames","subscribe","onMessageReceived","send","payload","includes","gameID","split","type","deckData","JSON","stringify","isSearching","className","children","isOpen","onRequestClose","style","content","width","height","background","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/MainPageComponents/MainPage.tsx"],"sourcesContent":["import React,{useState} from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport {Card} from './../Interfaces/Card';\r\nimport './MainPage.css';\r\nimport Modal from 'react-modal';\r\n\r\nvar stompClient: any = null;\r\nconst MainPage = () => {\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const [decks, setDecks] = useState<string[]>([]);\r\n  let navigate = useNavigate();\r\n  let dispatch = useDispatch();\r\n  const RedirectToDeckBuilder = () =>{\r\n\r\n    console.log(serverURL);\r\n      fetch(serverURL + '/DeckBuilder/setupBuilder', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: userName,\r\n      }).then(() => {\r\n        navigate(\"/DeckBuilder\");\r\n      });\r\n  }\r\n\r\n\r\n  const handleModalClose= (deck:string) => {\r\n    fetch(`${serverURL}/DeckBuilder/ValidateDeck/${userName}/${deck}`)\r\n    .then((res) => res.json())\r\n    .then((isDeckValid: boolean) => {\r\n      if(isDeckValid) {\r\n        switchDecks(deck);\r\n      }\r\n      else {\r\n        window.alert(\"This deck is not valid\");\r\n      }\r\n    }).catch(console.error);\r\n\r\n  }\r\n  const switchDecks = (deck:string) => {\r\n      fetch(`${serverURL}/DeckBuilder/SelectDeck/${userName}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:deck \r\n      }).then(() => {\r\n        let Sock = new SockJS(serverURL + '/ws');\r\n        stompClient = over(Sock);\r\n        stompClient.connect({}, onConnect);\r\n        setIsSearching(true);\r\n        setIsModalOpen(false);\r\n      });\r\n\r\n  }\r\n  const RedirectToDuel = () =>{\r\n    fetch(`${serverURL}/DeckBuilder/GetDecksNames/${userName}`)\r\n    .then((res) => res.json())\r\n    .then((decksNames: string[]) => {\r\n      setDecks(decksNames);\r\n    }).then(() => {\r\n      setIsModalOpen(true);\r\n    })\r\n    .catch(console.error);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived );\r\n    stompClient.send('/app/findEnemy', {}, userName);\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    if(payload.body.includes(\"Found enemy\") ) {\r\n\r\n      let gameID = payload.body.split(\":\")[1]; \r\n      dispatch({type:\"SET_GAME_ID\", payload: gameID});\r\n\r\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`)\r\n        .then((res) => res.json())\r\n        .then((deckData: Card[]) => {\r\n\r\n          fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(deckData),\r\n          }).then(() => {\r\n          });\r\n        })\r\n        .catch(console.error);\r\n    }\r\n    else if(payload.body.includes(\"Get into duel page\")) {\r\n      navigate(\"/Duel\");\r\n    }\r\n  }\r\n\r\n  const [isSearching, setIsSearching] = useState<boolean>(false);\r\n\r\n\r\n  return (\r\n    <div className=\"MainPageBody\">\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose(\"\")} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose deck</h2>\r\n        {decks.map((deck, index) =>(\r\n          <button className=\"btn\" onClick= { () => handleModalClose(deck) }>{deck}</button>\r\n        ))}\r\n      </Modal>\r\n      <h1>Hello {userName}</h1>\r\n      <button className=\"btn\" onClick={RedirectToDeckBuilder}>Build your deck</button> <br />\r\n      <button className=\"btn\"onClick={RedirectToDuel}>Find enemy</button> <br />\r\n      {isSearching && <label className=\"spinner\"></label>}\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default MainPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}