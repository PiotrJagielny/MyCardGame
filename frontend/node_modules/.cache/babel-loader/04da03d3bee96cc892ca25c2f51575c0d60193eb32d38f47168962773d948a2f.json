{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\MainPageComponents\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './MainPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst MainPage = () => {\n  _s();\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  let navigate = useNavigate();\n  let dispatch = useDispatch();\n  const RedirectToDeckBuilder = () => {\n    fetch(serverURL + '/DeckBuilder/setupBuilder', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: userName\n    }).then(() => {\n      navigate(\"/DeckBuilder\");\n    });\n  };\n  const RedirectToDuel = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnect);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\n    stompClient.send('/app/findEnemy', {}, userName);\n  };\n  const onMessageReceived = payload => {\n    if (payload.body.includes(\"Found enemy\")) {\n      let gameID = payload.body.split(\":\")[1];\n      dispatch({\n        type: \"SET_GAME_ID\",\n        payload: gameID\n      });\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`).then(res => res.json()).then(deckData => {\n        fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(deckData)\n        }).then(() => {});\n      }).catch(console.error);\n    } else if (payload.body.includes(\"Get into duel page\")) {\n      navigate(\"/Duel\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPageBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDeckBuilder,\n      children: \"Build your deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 87\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: RedirectToDuel,\n      children: \"Find enemy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 75\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"RUezdhBws9IeEw/c1RVbz4ux6do=\", false, function () {\n  return [useSelector, useSelector, useNavigate, useDispatch];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useNavigate","SockJS","over","useSelector","useDispatch","jsxDEV","_jsxDEV","stompClient","MainPage","_s","userName","state","serverURL","navigate","dispatch","RedirectToDeckBuilder","fetch","method","headers","body","then","RedirectToDuel","Sock","connect","onConnect","subscribe","onMessageReceived","send","payload","includes","gameID","split","type","res","json","deckData","JSON","stringify","catch","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/MainPageComponents/MainPage.tsx"],"sourcesContent":["import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport {Card} from './../Interfaces/Card';\r\nimport './MainPage.css';\r\n\r\nvar stompClient: any = null;\r\nconst MainPage = () => {\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n  let navigate = useNavigate();\r\n  let dispatch = useDispatch();\r\n  const RedirectToDeckBuilder = () =>{\r\n\r\n      fetch(serverURL + '/DeckBuilder/setupBuilder', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: userName,\r\n      }).then(() => {\r\n        navigate(\"/DeckBuilder\");\r\n      });\r\n  }\r\n\r\n\r\n  const RedirectToDuel = () =>{\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnect);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived );\r\n    stompClient.send('/app/findEnemy', {}, userName);\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    if(payload.body.includes(\"Found enemy\") ) {\r\n\r\n      let gameID = payload.body.split(\":\")[1]; \r\n      dispatch({type:\"SET_GAME_ID\", payload: gameID});\r\n\r\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}`)\r\n        .then((res) => res.json())\r\n        .then((deckData: Card[]) => {\r\n\r\n          fetch(`${serverURL}/Duel/registerUser/${userName}/${gameID}`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(deckData),\r\n          }).then(() => {\r\n          });\r\n        })\r\n        .catch(console.error);\r\n    }\r\n    else if(payload.body.includes(\"Get into duel page\")) {\r\n      navigate(\"/Duel\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"MainPageBody\">\r\n      <h1>Hello {userName}</h1>\r\n      <button className=\"btn\"onClick={RedirectToDeckBuilder}>Build your deck</button> <br />\r\n      <button className=\"btn\"onClick={RedirectToDuel}>Find enemy</button> <br />\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default MainPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}