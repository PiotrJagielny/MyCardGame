{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DuelPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnBoard, setPointsOnBoard] = useState(0);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [cardsInHand2, setCardsInHand2] = useState([]);\n  const [cardsOnBoard2, setCardsOnBoard2] = useState([]);\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState([]);\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState([]);\n  const [pointsOnBoard2, setPointsOnBoard2] = useState(0);\n  const [wonRounds2, setWonRounds2] = useState(0);\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState(false);\n  const [didWon2, setDidWon2] = useState(false);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const [affectableRows, setAffectableRows] = useState([]);\n  const [deckData, setDeckData] = useState([]);\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck').then(res => res.json()).then(deckData => {\n      setDeckData(deckData);\n    }).catch(console.error);\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  let firstPlayer = \"first\";\n  let secondPlayer = \"second\";\n  useEffect(() => {\n    const controller = new AbortController();\n    if (deckData.length > 0) {\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(deckData),\n        signal: controller.signal\n      });\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [deckData]);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetchData(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand, setCardsInHand);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`, cardsOnBoard, setCardsOnBoard);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow, setCardsOnSecondRow);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow, setCardsOnThirdRow);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard, setPointsOnBoard);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds, setWonRounds);\n    fetchData(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon, setDidWon);\n    fetchData(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2, setCardsInHand2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`, cardsOnBoard2, setCardsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2, setCardsOnSecondRow2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2, setCardsOnThirdRow2);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2, setPointsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2, setIsTurnOfPlayer2);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2, setWonRounds2);\n    fetchData(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2, setDidWon2);\n    setRefresh(true);\n  };\n  const [cardDragged, setCardDragged] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState(0);\n  const [playerPlayer, setPlayerPlayer] = useState(\"none\");\n  const [cardAffected, setCardAffected] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    setCardAffected(card);\n    // console.log(card);\n    // playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, card);\n    // fetchCardsData();\n  };\n\n  useEffect(() => {\n    fetch(`http://localhost:8000/Duel/getPossibleRowsToAffect`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async response => {\n      const possibleAffectedRows = await response.json();\n      await makeMove(possibleAffectedRows);\n    });\n  }, [cardAffected]);\n  const makeMove = possibleAffectedRows => {\n    setAffectableRows(possibleAffectedRows);\n    setIsRowsModalOpen(true);\n  };\n  const handleRowsModalClose = number => {\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, cardAffected);\n    fetchCardsData();\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    setCardDragged({\n      name: result.draggableId,\n      points: 0\n    });\n    setPostOnRowNumberOf(-1);\n    if (destination.droppableId === \"BoardRow1\") {\n      setPostOnRowNumberOf(0);\n    } else if (destination.droppableId === \"BoardRow2\") {\n      setPostOnRowNumberOf(1);\n    } else if (destination.droppableId === \"BoardRow3\") {\n      setPostOnRowNumberOf(2);\n    }\n    setPlayerPlayer(player);\n  };\n  useEffect(() => {\n    fetch(`http://localhost:8000/Duel/getPossibleTargets/${playerPlayer}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const targetableCardsResponse = await response.json();\n      await ensure(targetableCardsResponse);\n    });\n  }, [playerPlayer]);\n  const ensure = async targetableCardsArg => {\n    if (targetableCardsArg.length === 0) {\n      await playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, {\n        name: \"nor\",\n        points: 1\n      });\n      await fetchCardsData();\n    } else {\n      setTargetableCards(targetableCardsArg);\n      setIsModalOpen(true);\n    }\n  };\n  const playDraggedCard = async (postURL, cardDragged, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    await fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Let the battle begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => endRoundFor(firstPlayer),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Did you won: \", didWon.toString(), \"|\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Won rounds: \", wonRounds, \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Is your turn: \", isTurnOfPlayer1.toString(), \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose({\n        name: \"Not\",\n        points: 1\n      }),\n      children: targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          color: 'blue',\n          image: 'none',\n          name: card.name,\n          points: card.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRowsModalOpen,\n      onRequestClose: () => handleRowsModalClose({\n        name: \"Not\",\n        points: 1\n      }),\n      children: affectableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleRowsModalClose(row);\n        },\n        children: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, firstPlayer),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, secondPlayer),\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => endRoundFor(secondPlayer),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Did you won: \", didWon2.toString(), \"|\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Won rounds: \", wonRounds2, \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Is your turn: \", isTurnOfPlayer2.toString(), \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"pW5+Tn3S/Md6NMLhFMNN0kEAW+A=\");\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","Modal","CardComponent","jsxDEV","_jsxDEV","DuelPage","_s","refresh","setRefresh","isModalOpen","setIsModalOpen","isRowsModalOpen","setIsRowsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnBoard","setPointsOnBoard","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","cardsInHand2","setCardsInHand2","cardsOnBoard2","setCardsOnBoard2","cardsOnSecondRow2","setCardsOnSecondRow2","cardsOnThirdRow2","setCardsOnThirdRow2","pointsOnBoard2","setPointsOnBoard2","wonRounds2","setWonRounds2","isTurnOfPlayer2","setIsTurnOfPlayer2","didWon2","setDidWon2","targetableCards","setTargetableCards","affectableRows","setAffectableRows","deckData","setDeckData","controller","AbortController","fetch","then","res","json","catch","console","error","abort","firstPlayer","secondPlayer","length","method","headers","body","JSON","stringify","signal","fetchData","url","data","setter","fetchCardsData","cardDragged","setCardDragged","name","points","postOnRowNumberOf","setPostOnRowNumberOf","playerPlayer","setPlayerPlayer","cardAffected","setCardAffected","handleModalClose","card","response","possibleAffectedRows","makeMove","handleRowsModalClose","number","playDraggedCard","onDragEndOf","result","player","destination","droppableId","draggableId","targetableCardsResponse","ensure","targetableCardsArg","postURL","cardTargetted","args","endRoundFor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toString","isOpen","onRequestClose","map","index","color","image","row","onDragEnd","cardsOnRow","pointsOnRow","rowDroppableId","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\n\r\nconst DuelPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard, setPointsOnBoard] = useState<number>(0);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n  const [cardsInHand2, setCardsInHand2] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard2, setCardsOnBoard2] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard2, setPointsOnBoard2] = useState<number>(0);\r\n  const [wonRounds2, setWonRounds2] = useState<number>(0);\r\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState<boolean>(false);\r\n  const [didWon2, setDidWon2] = useState<boolean>(false);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n  const [affectableRows, setAffectableRows] = useState<number[]>([]);\r\n\r\n\r\n\r\n\r\n\r\n  const [deckData, setDeckData] = useState<Card[]>([]);\r\n\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck')\r\n      .then((res) => res.json())\r\n      .then((deckData: Card[]) => {\r\n        setDeckData(deckData);\r\n      })\r\n      .catch(console.error);\r\n\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n  let firstPlayer:string = \"first\";\r\n  let secondPlayer:string = \"second\";\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    if (deckData.length > 0) {\r\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(deckData),\r\n        signal: controller.signal\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n\r\n  }, [deckData]);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand ,setCardsInHand);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`,cardsOnBoard ,setCardsOnBoard);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard ,setPointsOnBoard);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds ,setWonRounds);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon ,setDidWon);\r\n\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2 ,setCardsInHand2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`,cardsOnBoard2 ,setCardsOnBoard2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2 ,setCardsOnSecondRow2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2 ,setCardsOnThirdRow2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2 ,setPointsOnBoard2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2 ,setIsTurnOfPlayer2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2 ,setWonRounds2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2 ,setDidWon2);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n\r\n\r\n  const [cardDragged, setCardDragged] = useState<Card>({name: \"points\", points: 0});\r\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState<number>(0);\r\n  const [playerPlayer,setPlayerPlayer] = useState<string>(\"none\");\r\n  const [cardAffected, setCardAffected] = useState<Card>({name: \"points\", points: 0});\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    setCardAffected(card);\r\n    // console.log(card);\r\n    // playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, card);\r\n    // fetchCardsData();\r\n  };\r\n  useEffect(() => {\r\n    fetch(`http://localhost:8000/Duel/getPossibleRowsToAffect`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(async (response) => {\r\n\r\n      const possibleAffectedRows = await response.json();\r\n\r\n      await makeMove(possibleAffectedRows);\r\n\r\n    });\r\n\r\n  }, [cardAffected]);\r\n  \r\n\r\n  const makeMove = (possibleAffectedRows: number[]) => {\r\n    setAffectableRows(possibleAffectedRows);\r\n    setIsRowsModalOpen(true);\r\n\r\n  }\r\n  const handleRowsModalClose = (number: affectedRow) => {\r\n    \r\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, cardAffected);\r\n    fetchCardsData();\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    setCardDragged({name: result.draggableId, points: 0});\r\n    setPostOnRowNumberOf(-1);\r\n    if(destination.droppableId === \"BoardRow1\"){\r\n      setPostOnRowNumberOf(0);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow2\"){\r\n      setPostOnRowNumberOf(1);\r\n    }\r\n    else if(destination.droppableId === \"BoardRow3\"){\r\n      setPostOnRowNumberOf(2);\r\n    }\r\n    setPlayerPlayer(player);\r\n\r\n\r\n\r\n  }\r\n  useEffect(() => {\r\n    fetch(`http://localhost:8000/Duel/getPossibleTargets/${playerPlayer}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const targetableCardsResponse= await response.json();\r\n\r\n      await ensure(targetableCardsResponse);\r\n\r\n    });\r\n\r\n  }, [playerPlayer]);\r\n  const ensure = async (targetableCardsArg:Card[]) => {\r\n\r\n      if(targetableCardsArg.length === 0) {\r\n        await playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${playerPlayer}&rowNumber=${postOnRowNumberOf}`, cardDragged, {name:\"nor\", points: 1});\r\n        await fetchCardsData();\r\n      }\r\n      else {\r\n        setTargetableCards(targetableCardsArg);\r\n        setIsModalOpen(true);\r\n      }\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardDragged:Card, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    await fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    });\r\n}\r\n\r\n  return (\r\n    \r\n    <div>\r\n      \r\n\r\n      <div>\r\n        <label>Let the battle begin</label>\r\n        <button onClick={fetchCardsData}>Load data</button>\r\n      </div>\r\n\r\n      <div>\r\n        <button onClick={() => endRoundFor(firstPlayer)}>End round</button>\r\n        <label> |Did you won: {didWon.toString()}|</label>\r\n        <label> |Won rounds: {wonRounds}| </label>\r\n        <label> |Is your turn: {isTurnOfPlayer1.toString()}| </label>\r\n      </div>\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose({name: \"Not\", points: 1})}>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent color={'blue'} image={'none'} name={card.name} points={card.points}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isRowsModalOpen} onRequestClose={() => handleRowsModalClose({name: \"Not\", points: 1})}>\r\n        {affectableRows.map((row, index) =>(\r\n          <button onClick= { () => {handleRowsModalClose(row)} }>{row}</button>\r\n        ))}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, firstPlayer)}>\r\n        <HandComponent cardsInHand = {cardsInHand}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n      \r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, secondPlayer)}>\r\n        <RowComponent cardsOnRow = {cardsOnBoard2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        \r\n        <HandComponent cardsInHand = {cardsInHand2}></HandComponent>\r\n      </DragDropContext>\r\n      \r\n      \r\n      <div>\r\n        <button onClick={() => endRoundFor(secondPlayer)}>End round</button>\r\n        <label> |Did you won: {didWon2.toString()}|</label>\r\n        <label> |Won rounds: {wonRounds2}| </label>\r\n        <label> |Is your turn: {isTurnOfPlayer2.toString()}| </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}