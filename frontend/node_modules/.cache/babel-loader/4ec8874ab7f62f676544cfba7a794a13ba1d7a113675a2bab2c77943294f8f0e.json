{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createEmptyCard } from './../Interfaces/Card';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport EnemyHandComponent from './EnemyHandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { useSelector } from 'react-redux';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nvar firstRow = 0;\nvar secondRow = 1;\nvar thirdRow = 2;\nvar firstRowId = \"Row 1\";\nvar secondRowId = \"Row 2\";\nvar thirdRowId = \"Row 3\";\nvar rowStatusToImageUrl = new Map([[\"\", \"\"], [\"Rain\", \"https://parspng.com/wp-content/uploads/2022/06/rainpng.parspng.com-4.png\"]]);\nconst DuelPage = () => {\n  _s();\n  let navigate = useNavigate();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isGraveyardModalOpen, setIsGraveyardModalOpen] = useState(false);\n  const [isDeckCardsModalOpen, setIsDeckCardsModalOpen] = useState(false);\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [graveyardCards, setGraveyardCards] = useState([]);\n  const [cardsInDeck, setCardsInDeck] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnRows, setPointsOnRows] = useState([]);\n  const [rowsStatus, setRowsStatus] = useState([]);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState([]);\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState([]);\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState([]);\n  const [enemyPointsOnRows, setEnemyPointsOnRows] = useState([]);\n  const [enemyWonRounds, setenemyWonRounds] = useState(0);\n  const [isEnemyTurn, setisEnemyTurn] = useState(false);\n  const [didEnemyWon, setdidEnemyWon] = useState(false);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const [affectableRows, setAffectableRows] = useState([]);\n  const [enemyName, setEnemyName] = useState(\"\");\n  const [enemyHandSize, setEnemyHandSize] = useState(0);\n  const [enemyEndRoundBackground, setEnemyEndRoundBackground] = useState('');\n  const [enemyEndRoundMessage, setEnemyEndRoundMessage] = useState('');\n  const [playerEndRoundBackground, setPlayerEndRoundBackground] = useState('');\n  const [playerEndRoundMessage, setPlayerEndRoundMessage] = useState('');\n  const gameID = useSelector(state => state.gameID);\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const connectToSocket = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnect);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived);\n    stompClient.subscribe('/user/' + userName + '/enemyEndRound', enemyEndRoundTrigger);\n    stompClient.subscribe('/user/' + userName + '/newRoundStarted', newRoundStarted);\n    stompClient.subscribe('/user/' + userName + '/mulligan', mulliganMessage);\n    setIsMulliganModalOpen(true);\n  };\n  const onMessageReceived = payload => {\n    fetchCardsData();\n  };\n  const enemyEndRoundTrigger = payload => {\n    fetchCardsData();\n    setEnemyEndRoundBackground('rgba(0,0,0,0.4');\n    setEnemyEndRoundMessage(\"Enemy ended round\");\n  };\n  const newRoundStarted = payload => {\n    alertt(\"New round has started\", \"https://images.pexels.com/photos/326333/pexels-photo-326333.jpeg?cs=srgb&dl=pexels-pixabay-326333.jpg&fm=jpg\", 3000, false);\n    setEnemyEndRoundBackground('');\n    setEnemyEndRoundMessage('');\n    setPlayerEndRoundBackground('');\n    setPlayerEndRoundMessage('');\n    fetchCardsData();\n  };\n  const [mulliganedCards, setMulliganedCards] = useState(1);\n  const [didEnemyEndedMulligan, setDidEnemyEndedMulligan] = useState(false);\n  const [didPlayerEndedMulligan, setDidPlayerEndedMulligan] = useState(false);\n  const [isMulliganModalOpen, setIsMulliganModalOpen] = useState(false);\n  const mulliganMessage = payload => {\n    setDidEnemyEndedMulligan(true);\n  };\n  useEffect(() => {\n    endMulligan();\n  }, [didEnemyEndedMulligan]);\n  useEffect(() => {\n    endMulligan();\n  }, [didPlayerEndedMulligan]);\n  const endMulligan = () => {\n    if (didEnemyEndedMulligan === true && didPlayerEndedMulligan === true) {\n      setMulliganedCards(1);\n      setIsMulliganModalOpen(false);\n    }\n  };\n  const mulliganCard = cardToMulligan => {\n    if (cardToMulligan.name !== \"\" && mulliganedCards <= 3) {\n      fetch(serverURL + `/Duel/mulliganCard/${userName}/${gameID}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(cardToMulligan)\n      }).then(() => {\n        fetchData(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand, setCardsInHand);\n        setMulliganedCards(mulliganedCards + 1);\n      }).then(() => {\n        if (mulliganedCards === 3) {\n          stompClient.send('/app/mulliganEnded', {}, userName);\n          setDidPlayerEndedMulligan(true);\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    connectToSocket();\n    const controller = new AbortController();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`).then(res => res.text()).then(data => {\n      setEnemyName(data);\n      let userEnemy = data;\n      fetchData(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand, setCardsInHand);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`, cardsOnBoard, setCardsOnBoard);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow, setCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow, setCardsOnThirdRow);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds, setWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon, setDidWon);\n      fetchData(`${serverURL}/Duel/getRowsPoints/${userName}/${gameID}`, pointsOnRows, setPointsOnRows);\n      fetchData(`${serverURL}/Duel/getRowsStatus/${userName}/${gameID}`, rowsStatus, setRowsStatus);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`, enemyCardsOnFirstRow, setenemyCardsOnFirstRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow, setenemyCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow, setCardsOnThirdRow2);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn, setisEnemyTurn);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds, setenemyWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon, setdidEnemyWon);\n      fetchData(`${serverURL}/Duel/getRowsPoints/${userEnemy}/${gameID}`, enemyPointsOnRows, setEnemyPointsOnRows);\n      fetchData(`${serverURL}/Duel/getRowsStatus/${userEnemy}/${gameID}`, rowsStatus, setRowsStatus);\n      fetchData(`${serverURL}/Duel/getHandSize/${userEnemy}/${gameID}`, enemyHandSize, setEnemyHandSize);\n    }).then(() => {\n      if (wonRounds === enemyWonRounds && wonRounds === 2) {\n        alertt(\"Draw\", \"https://c4.wallpaperflare.com/wallpaper/103/477/186/forest-light-nature-forest-wallpaper-preview.jpg\", 0, true);\n      } else if (wonRounds === 2) {\n        alertt(\"You won!\", \"https://png.pngtree.com/thumb_back/fh260/background/20220523/pngtree-stage-podium-with-rays-of-spotlights-for-award-ceremony-winner-with-image_1400291.jpg\", 0, true);\n      } else if (enemyWonRounds === 2) {\n        alertt(\"You lost!\", \"https://c4.wallpaperflare.com/wallpaper/33/477/228/rain-showers-forest-illustration-wallpaper-preview.jpg\", 0, true);\n      }\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  const alertt = (msg, imageURL, timeout, appearButton) => {\n    const alert = document.createElement('div');\n    alert.classList.add('alert');\n    const alertButton = document.createElement('button');\n    alertButton.innerText = 'Back to main menu';\n    alert.setAttribute('style', `\n      position: fixed;\n      top: 30%;\n      left:50%;\n      padding:20px;\n      border-radius: 10px;\n      box-shadow: 0 10px 5px 0 #00000022; \n      display:flex;\n      flex-direction:column;\n      background-image: url(${imageURL});\n      background-size: cover;\n      background-position: center;\n      height: 200px;\n      width: 200px;\n    `);\n    alertButton.setAttribute('style', `\n      border: 1px solidd #333;\n      background:white;\n      border-radius: 5px;\n      padding: 5px;\n    \n    `);\n    alert.innerHTML = `<span style=\"\n      font-size: 20px;\n      padding: 29%;\n      padding-left: 59px;\n      \">\n     ${msg}\n     </span>`;\n    if (appearButton) {\n      alert.appendChild(alertButton);\n      alertButton.addEventListener('click', e => {\n        alert.remove();\n        navigate(\"/Main\");\n      });\n    }\n    if (timeout !== 0) {\n      setTimeout(() => {\n        alert.remove();\n      }, Number(timeout));\n    }\n    document.body.appendChild(alert);\n  };\n  const [cardDragged, setCardDragged] = useState(createEmptyCard());\n  const [playChainCard, setPlayChainCard] = useState(createEmptyCard());\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState(0);\n  const [cardAffected, setCardAffected] = useState(createEmptyCard());\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    setCardAffected(card);\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const possibleAffectedRows = await response.json();\n      await makeMove(possibleAffectedRows);\n    });\n  }, [cardAffected]);\n  const makeMove = async possibleAffectedRows => {\n    if (possibleAffectedRows.length === 0) {\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardAffected);\n    } else {\n      setAffectableRows(possibleAffectedRows);\n      setIsRowsModalOpen(true);\n    }\n  };\n  const handleRowsModalClose = affectedRow => {\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardAffected);\n    setIsRowsModalOpen(false);\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    setPostOnRowNumberOf(-1);\n    if (destination.droppableId === firstRowId) {\n      setPostOnRowNumberOf(0);\n    } else if (destination.droppableId === secondRowId) {\n      setPostOnRowNumberOf(1);\n    } else if (destination.droppableId === thirdRowId) {\n      setPostOnRowNumberOf(2);\n    }\n    // setCardDragged(createCardWithName(result.draggableId));\n    setCardDragged(cardsInHand.find(card => card.id === Number(result.draggableId)));\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const targetableCardsResponse = await response.json();\n      await ensure(targetableCardsResponse);\n    });\n  }, [cardDragged]);\n  const ensure = async targetableCardsArg => {\n    if (targetableCardsArg.length === 0) {\n      setCardAffected(createEmptyCard());\n    } else {\n      setTargetableCards(targetableCardsArg);\n      setIsModalOpen(true);\n    }\n  };\n  const playDraggedCard = async (postURL, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    }).then(res => res.json()).then(cardChained => {\n      setPlayChainCard(cardChained);\n      stompClient.send('/app/sendTrigger', {}, userName, userName);\n      fetchCardsData();\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    }).then(() => {\n      setPlayerEndRoundBackground('rgba(0,0,0,0.4');\n      setPlayerEndRoundMessage(\"You ended round\");\n      fetchCardsData();\n    });\n  };\n  const renderWonRounds = wonRoudnsOfPlayer => {\n    const wonRoundsDivs = [];\n    for (let i = 0; i < wonRoudnsOfPlayer; i++) {\n      wonRoundsDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn-icons-png.flaticon.com/512/6941/6941697.png\",\n          style: {\n            width: 30,\n            height: 30\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 39\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 26\n      }, this));\n    }\n    if (wonRoundsDivs.length === 0) {\n      wonRoundsDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 30,\n          height: 30\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 26\n      }, this));\n    }\n    return wonRoundsDivs;\n  };\n  const getEnemyHandBlankCards = () => {\n    let cards = [];\n    for (let i = 0; i < enemyHandSize; ++i) {\n      cards.push(createEmptyCard());\n    }\n    return cards;\n  };\n  const handleGraveyardOpen = () => {\n    fetch(serverURL + `/Duel/getGraveyardCards/${userName}/${gameID}`).then(res => res.json()).then(data => {\n      setGraveyardCards(data);\n    }).then(() => {\n      setIsGraveyardModalOpen(true);\n    }).catch(console.error);\n  };\n  const handleDeckCardsOpen = () => {\n    fetch(serverURL + `/Duel/getDeckCards/${userName}/${gameID}`).then(res => res.json()).then(data => {\n      setCardsInDeck(data);\n    }).then(() => {\n      setIsDeckCardsModalOpen(true);\n    }).catch(console.error);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTag\",\n      children: [userName, \" : \", pointsOnRows.reduce((sum, e) => sum + e, 0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerInfo\",\n      children: isTurnOfPlayer1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Your turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn0.iconfinder.com/data/icons/crime-protection-people-rounded/110/Sword-512.png\",\n          style: {\n            width: 70,\n            height: 70\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enemy turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn-icons-png.flaticon.com/512/1377/1377064.png\",\n          style: {\n            width: 70,\n            height: 70\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleGraveyardOpen,\n        children: \"Show graveyard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleDeckCardsOpen,\n        children: \"Show cards in deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 30,\n        height: 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose(createEmptyCard()),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a card to target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          card: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isMulliganModalOpen,\n      onRequestClose: () => mulliganCard(createEmptyCard()),\n      style: {\n        content: {\n          width: '500px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a card to mulligan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), cardsInHand.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          mulliganCard(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          card: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 59\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isGraveyardModalOpen,\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Graveyard cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), graveyardCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          card: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsGraveyardModalOpen(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isDeckCardsModalOpen,\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cards in deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), cardsInDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          card: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsDeckCardsModalOpen(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRowsModalOpen,\n      onRequestClose: () => handleRowsModalClose(-1),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a row to traget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), affectableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '30px'\n        },\n        onClick: () => {\n          handleRowsModalClose(row);\n        },\n        children: row + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, userName),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand,\n        cardInPlayChain: playChainCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnRows[thirdRow],\n        rowDroppableId: thirdRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[thirdRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnRows[secondRow],\n        rowDroppableId: secondRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[secondRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnRows[firstRow],\n        rowDroppableId: firstRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[firstRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wonRounds\",\n      style: {\n        background: playerEndRoundBackground || ''\n      },\n      children: [renderWonRounds(wonRounds), \" \", playerEndRoundMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardMiddle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endRoundDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"endRoundButton\",\n          onClick: () => endRoundFor(userName),\n          children: \"End round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wonRounds\",\n      style: {\n        background: enemyEndRoundBackground || ''\n      },\n      children: [renderWonRounds(enemyWonRounds), \" \", enemyEndRoundMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: () => {},\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnFirstRow,\n        pointsOnRow: enemyPointsOnRows[firstRow],\n        rowDroppableId: firstRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[firstRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnSecondRow,\n        pointsOnRow: enemyPointsOnRows[secondRow],\n        rowDroppableId: secondRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[secondRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnThirdRow,\n        pointsOnRow: enemyPointsOnRows[thirdRow],\n        rowDroppableId: thirdRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[thirdRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EnemyHandComponent, {\n        cardsInHand: getEnemyHandBlankCards(),\n        cardInPlayChain: createEmptyCard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"enemyTag\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemyName\",\n        children: [enemyName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 33\n      }, this), \": \", enemyPointsOnRows.reduce((sum, e) => sum + e, 0), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"J9Xza/SIA0tcZs2TEZzh6RXohsE=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useSelector];\n});\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","createEmptyCard","DragDropContext","HandComponent","EnemyHandComponent","RowComponent","Modal","CardComponent","useSelector","SockJS","over","useNavigate","jsxDEV","_jsxDEV","stompClient","firstRow","secondRow","thirdRow","firstRowId","secondRowId","thirdRowId","rowStatusToImageUrl","Map","DuelPage","_s","navigate","refresh","setRefresh","isModalOpen","setIsModalOpen","isGraveyardModalOpen","setIsGraveyardModalOpen","isDeckCardsModalOpen","setIsDeckCardsModalOpen","isRowsModalOpen","setIsRowsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","graveyardCards","setGraveyardCards","cardsInDeck","setCardsInDeck","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnRows","setPointsOnRows","rowsStatus","setRowsStatus","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","enemyCardsOnFirstRow","setenemyCardsOnFirstRow","enemyCardsOnSecondRow","setenemyCardsOnSecondRow","enemyCardsOnThirdRow","setCardsOnThirdRow2","enemyPointsOnRows","setEnemyPointsOnRows","enemyWonRounds","setenemyWonRounds","isEnemyTurn","setisEnemyTurn","didEnemyWon","setdidEnemyWon","targetableCards","setTargetableCards","affectableRows","setAffectableRows","enemyName","setEnemyName","enemyHandSize","setEnemyHandSize","enemyEndRoundBackground","setEnemyEndRoundBackground","enemyEndRoundMessage","setEnemyEndRoundMessage","playerEndRoundBackground","setPlayerEndRoundBackground","playerEndRoundMessage","setPlayerEndRoundMessage","gameID","state","userName","serverURL","connectToSocket","Sock","connect","onConnect","subscribe","onMessageReceived","enemyEndRoundTrigger","newRoundStarted","mulliganMessage","setIsMulliganModalOpen","payload","fetchCardsData","alertt","mulliganedCards","setMulliganedCards","didEnemyEndedMulligan","setDidEnemyEndedMulligan","didPlayerEndedMulligan","setDidPlayerEndedMulligan","isMulliganModalOpen","endMulligan","mulliganCard","cardToMulligan","name","fetch","method","headers","body","JSON","stringify","then","fetchData","send","controller","AbortController","abort","url","data","setter","res","json","catch","console","error","text","userEnemy","msg","imageURL","timeout","appearButton","alert","document","createElement","classList","add","alertButton","innerText","setAttribute","innerHTML","appendChild","addEventListener","e","remove","setTimeout","Number","cardDragged","setCardDragged","playChainCard","setPlayChainCard","postOnRowNumberOf","setPostOnRowNumberOf","cardAffected","setCardAffected","handleModalClose","card","response","possibleAffectedRows","makeMove","length","playDraggedCard","handleRowsModalClose","affectedRow","onDragEndOf","result","player","destination","droppableId","find","id","draggableId","targetableCardsResponse","ensure","targetableCardsArg","postURL","cardTargetted","args","cardChained","endRoundFor","renderWonRounds","wonRoudnsOfPlayer","wonRoundsDivs","i","push","children","src","style","width","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","getEnemyHandBlankCards","cards","handleGraveyardOpen","handleDeckCardsOpen","className","reduce","sum","onClick","isOpen","onRequestClose","content","background","map","index","row","fontSize","onDragEnd","cardInPlayChain","cardsOnRow","pointsOnRow","rowDroppableId","rowStatusImageURL","get","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card, createCardWithName, createEmptyCard} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport EnemyHandComponent from './EnemyHandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nvar stompClient:any = null;\r\nvar firstRow: number = 0;\r\nvar secondRow: number = 1;\r\nvar thirdRow: number = 2;\r\nvar firstRowId:string = \"Row 1\";\r\nvar secondRowId:string = \"Row 2\";\r\nvar thirdRowId:string = \"Row 3\";\r\nvar rowStatusToImageUrl: Map<string,string> = new Map<string,string>([\r\n  [\"\", \"\"],\r\n  [\"Rain\", \"https://parspng.com/wp-content/uploads/2022/06/rainpng.parspng.com-4.png\"],\r\n]);\r\nconst DuelPage = () => {\r\n\r\n  let navigate = useNavigate();\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isGraveyardModalOpen, setIsGraveyardModalOpen] = useState(false);\r\n  const [isDeckCardsModalOpen, setIsDeckCardsModalOpen] = useState(false);\r\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [graveyardCards, setGraveyardCards] = useState<Card[]>([]);\r\n  const [cardsInDeck, setCardsInDeck] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnRows, setPointsOnRows] = useState<number[]>([]);\r\n  const [rowsStatus, setRowsStatus] = useState<string[]>([]);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n\r\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [enemyPointsOnRows, setEnemyPointsOnRows] = useState<number[]>([]);\r\n  const [enemyWonRounds, setenemyWonRounds] = useState<number>(0);\r\n  const [isEnemyTurn, setisEnemyTurn] = useState<boolean>(false);\r\n  const [didEnemyWon, setdidEnemyWon] = useState<boolean>(false);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n  const [affectableRows, setAffectableRows] = useState<number[]>([]);\r\n  const [enemyName, setEnemyName] = useState<string>(\"\");\r\n  const [enemyHandSize, setEnemyHandSize] = useState<number>(0);\r\n\r\n\r\n\r\n  const [enemyEndRoundBackground, setEnemyEndRoundBackground] = useState<string>('');\r\n  const [enemyEndRoundMessage, setEnemyEndRoundMessage] = useState<string>('');\r\n  const [playerEndRoundBackground, setPlayerEndRoundBackground] = useState<string>('');\r\n  const [playerEndRoundMessage, setPlayerEndRoundMessage] = useState<string>('');\r\n\r\n  const gameID = useSelector<StateData, string>((state) => state.gameID);\r\n  const userName= useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n\r\n\r\n\r\n  const connectToSocket= () =>{\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnect);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived );\r\n    stompClient.subscribe('/user/' + userName + '/enemyEndRound', enemyEndRoundTrigger);\r\n    stompClient.subscribe('/user/' + userName + '/newRoundStarted', newRoundStarted);\r\n    stompClient.subscribe('/user/' + userName + '/mulligan', mulliganMessage);\r\n    setIsMulliganModalOpen(true);\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    fetchCardsData();\r\n  }\r\n  const enemyEndRoundTrigger = (payload: any) => {\r\n    fetchCardsData();\r\n    setEnemyEndRoundBackground('rgba(0,0,0,0.4');\r\n    setEnemyEndRoundMessage(\"Enemy ended round\");\r\n  }\r\n  const newRoundStarted = (payload: any) => {\r\n    alertt(\"New round has started\", \"https://images.pexels.com/photos/326333/pexels-photo-326333.jpeg?cs=srgb&dl=pexels-pixabay-326333.jpg&fm=jpg\", 3000, false);\r\n    setEnemyEndRoundBackground('');\r\n    setEnemyEndRoundMessage('');\r\n    setPlayerEndRoundBackground('');\r\n    setPlayerEndRoundMessage('');\r\n    fetchCardsData();\r\n  }\r\n\r\n\r\n  const [mulliganedCards, setMulliganedCards] = useState<number>(1);\r\n  const [didEnemyEndedMulligan, setDidEnemyEndedMulligan] = useState<boolean>(false);\r\n  const [didPlayerEndedMulligan, setDidPlayerEndedMulligan] = useState<boolean>(false);\r\n  const [isMulliganModalOpen, setIsMulliganModalOpen] = useState(false);\r\n  const mulliganMessage= (payload: any) => {\r\n    setDidEnemyEndedMulligan(true);\r\n  }\r\n  useEffect(() => {\r\n    endMulligan();\r\n  }, [didEnemyEndedMulligan]);\r\n  useEffect(() => {\r\n    endMulligan();\r\n  }, [didPlayerEndedMulligan]);\r\n  const endMulligan = () => {\r\n    if(didEnemyEndedMulligan === true && didPlayerEndedMulligan === true) {\r\n      setMulliganedCards(1);\r\n      setIsMulliganModalOpen(false);\r\n    }\r\n  }\r\n  const mulliganCard = (cardToMulligan: Card) => {\r\n    if(cardToMulligan.name !== \"\" && mulliganedCards <= 3) {\r\n      fetch(serverURL + `/Duel/mulliganCard/${userName}/${gameID}`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify(cardToMulligan)\r\n      }).then(() => {\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand ,setCardsInHand);\r\n        setMulliganedCards(mulliganedCards + 1);\r\n      }).then(() => {\r\n        if(mulliganedCards === 3) {\r\n          stompClient.send('/app/mulliganEnded', {}, userName);\r\n          setDidPlayerEndedMulligan(true);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    connectToSocket();\r\n    const controller = new AbortController();\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`)\r\n      .then((res) => res.text())\r\n      .then((data: string) => {\r\n        setEnemyName(data);\r\n        let userEnemy:string = data;\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand ,setCardsInHand);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`,cardsOnBoard ,setCardsOnBoard);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n        fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds ,setWonRounds);\r\n        fetchData<boolean>(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon ,setDidWon);\r\n        fetchData<number[]>(`${serverURL}/Duel/getRowsPoints/${userName}/${gameID}`, pointsOnRows,setPointsOnRows);\r\n        fetchData<string[]>(`${serverURL}/Duel/getRowsStatus/${userName}/${gameID}`, rowsStatus,setRowsStatus);\r\n\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`,enemyCardsOnFirstRow ,setenemyCardsOnFirstRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow,setenemyCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow ,setCardsOnThirdRow2);\r\n        fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn ,setisEnemyTurn);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds ,setenemyWonRounds);\r\n        fetchData<boolean>(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon ,setdidEnemyWon);\r\n        fetchData<number[]>(`${serverURL}/Duel/getRowsPoints/${userEnemy}/${gameID}`, enemyPointsOnRows,setEnemyPointsOnRows);\r\n        fetchData<string[]>(`${serverURL}/Duel/getRowsStatus/${userEnemy}/${gameID}`, rowsStatus,setRowsStatus);\r\n        fetchData<number>(`${serverURL}/Duel/getHandSize/${userEnemy}/${gameID}`, enemyHandSize,setEnemyHandSize);\r\n\r\n      }).then(() => {\r\n        if(wonRounds === enemyWonRounds && wonRounds === 2) {\r\n          alertt(\"Draw\",\"https://c4.wallpaperflare.com/wallpaper/103/477/186/forest-light-nature-forest-wallpaper-preview.jpg\", 0, true );\r\n        }\r\n        else if(wonRounds === 2) {\r\n          alertt(\"You won!\",\"https://png.pngtree.com/thumb_back/fh260/background/20220523/pngtree-stage-podium-with-rays-of-spotlights-for-award-ceremony-winner-with-image_1400291.jpg\", 0, true );\r\n        }\r\n        else if(enemyWonRounds === 2) {\r\n          alertt(\"You lost!\",\"https://c4.wallpaperflare.com/wallpaper/33/477/228/rain-showers-forest-illustration-wallpaper-preview.jpg\", 0, true );\r\n        }\r\n\r\n      })\r\n      .catch(console.error);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n  const alertt= (msg:string, imageURL:string, timeout:number, appearButton: boolean) => {\r\n    const alert = document.createElement('div');\r\n    alert.classList.add('alert');\r\n    const alertButton = document.createElement('button');\r\n    alertButton.innerText = 'Back to main menu';\r\n    alert.setAttribute('style', `\r\n      position: fixed;\r\n      top: 30%;\r\n      left:50%;\r\n      padding:20px;\r\n      border-radius: 10px;\r\n      box-shadow: 0 10px 5px 0 #00000022; \r\n      display:flex;\r\n      flex-direction:column;\r\n      background-image: url(${imageURL});\r\n      background-size: cover;\r\n      background-position: center;\r\n      height: 200px;\r\n      width: 200px;\r\n    `);\r\n    alertButton.setAttribute('style', `\r\n      border: 1px solidd #333;\r\n      background:white;\r\n      border-radius: 5px;\r\n      padding: 5px;\r\n    \r\n    `);\r\n    alert.innerHTML= `<span style=\"\r\n      font-size: 20px;\r\n      padding: 29%;\r\n      padding-left: 59px;\r\n      \">\r\n     ${msg}\r\n     </span>`;\r\n     if(appearButton) {\r\n      alert.appendChild(alertButton);\r\n      alertButton.addEventListener('click',(e) => {\r\n        alert.remove();\r\n        navigate(\"/Main\");\r\n      });\r\n     }\r\n    if(timeout !== 0) {\r\n      setTimeout(() => {\r\n        alert.remove();\r\n      }, Number(timeout))\r\n    }\r\n    document.body.appendChild(alert);\r\n  }\r\n\r\n\r\n\r\n  const [cardDragged, setCardDragged] = useState<Card>(createEmptyCard());\r\n  const [playChainCard, setPlayChainCard] = useState<Card>(createEmptyCard());\r\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState<number>(0);\r\n  const [cardAffected, setCardAffected] = useState<Card>(createEmptyCard());\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    setCardAffected(card);\r\n  };\r\n  useEffect(() => {\r\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const possibleAffectedRows = await response.json();\r\n\r\n      await makeMove(possibleAffectedRows);\r\n\r\n    });\r\n\r\n  }, [cardAffected]);\r\n  \r\n\r\n  const makeMove = async (possibleAffectedRows: number[]) => {\r\n    if(possibleAffectedRows.length === 0) {\r\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`,  cardAffected);\r\n    } \r\n    else {\r\n      setAffectableRows(possibleAffectedRows);\r\n      setIsRowsModalOpen(true);\r\n    } \r\n\r\n  }\r\n  const handleRowsModalClose = (affectedRow: number) => {\r\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`,  cardAffected);\r\n    setIsRowsModalOpen(false);\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    setPostOnRowNumberOf(-1);\r\n    if(destination.droppableId === firstRowId){\r\n      setPostOnRowNumberOf(0);\r\n    }\r\n    else if(destination.droppableId === secondRowId){\r\n      setPostOnRowNumberOf(1);\r\n    }\r\n    else if(destination.droppableId === thirdRowId){\r\n      setPostOnRowNumberOf(2);\r\n    }\r\n    // setCardDragged(createCardWithName(result.draggableId));\r\n    setCardDragged(cardsInHand.find((card) => card.id === Number(result.draggableId)));\r\n\r\n\r\n\r\n  }\r\n  useEffect( () => {\r\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const targetableCardsResponse= await response.json();\r\n\r\n      await ensure(targetableCardsResponse);\r\n\r\n    });\r\n\r\n  }, [cardDragged])\r\n\r\n  const ensure = async (targetableCardsArg:Card[]) => {\r\n\r\n      if(targetableCardsArg.length === 0) {\r\n        setCardAffected(createEmptyCard());\r\n      }\r\n      else {\r\n        setTargetableCards(targetableCardsArg);\r\n        setIsModalOpen(true);\r\n      }\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      }).then((res) => res.json()).then( (cardChained: Card) => {\r\n        setPlayChainCard(cardChained);\r\n        stompClient.send('/app/sendTrigger', {}, userName, userName);\r\n        fetchCardsData();\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    }).then( () => {\r\n      setPlayerEndRoundBackground('rgba(0,0,0,0.4');\r\n      setPlayerEndRoundMessage(\"You ended round\");\r\n      fetchCardsData()\r\n    });\r\n  }\r\n  const renderWonRounds = (wonRoudnsOfPlayer: number) => {\r\n    const wonRoundsDivs = [];\r\n    for(let i = 0 ; i < wonRoudnsOfPlayer; i++) {\r\n      wonRoundsDivs.push(<div key={i}><img src=\"https://cdn-icons-png.flaticon.com/512/6941/6941697.png\" style={{width: 30, height: 30}} alt=\"\"/></div>)\r\n    }\r\n    if(wonRoundsDivs.length === 0) {\r\n      wonRoundsDivs.push(<div style={{width: 30, height: 30}} > </div>)\r\n    }\r\n    return wonRoundsDivs;\r\n  } \r\n  const getEnemyHandBlankCards = () => {\r\n    let cards: Card[] = [];\r\n    for(let i = 0 ; i < enemyHandSize ; ++i ) {\r\n      cards.push(createEmptyCard());\r\n    }\r\n    return cards;\r\n  }\r\n  const handleGraveyardOpen = () => {\r\n    fetch(serverURL + `/Duel/getGraveyardCards/${userName}/${gameID}`)\r\n      .then((res) => res.json())\r\n      .then((data: Card[]) => {\r\n        setGraveyardCards(data);\r\n      }).then(() => {\r\n        setIsGraveyardModalOpen(true);\r\n      }).catch(console.error);\r\n  }\r\n  const handleDeckCardsOpen = () => {\r\n    fetch(serverURL + `/Duel/getDeckCards/${userName}/${gameID}`)\r\n      .then((res) => res.json())\r\n      .then((data: Card[]) => {\r\n        setCardsInDeck(data);\r\n      }).then(() => {\r\n        setIsDeckCardsModalOpen(true);\r\n      }).catch(console.error);\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <div className=\"playerTag\">{userName} : {pointsOnRows.reduce((sum, e) => sum + e, 0)}</div>\r\n      <div className=\"playerInfo\">\r\n        {isTurnOfPlayer1?\r\n        <div>\r\n          <label >Your turn</label>\r\n          <img src=\"https://cdn0.iconfinder.com/data/icons/crime-protection-people-rounded/110/Sword-512.png\" style={{width: 70, height: 70}} alt=\"\"/>\r\n        </div>\r\n        :\r\n        <div>\r\n          <label >Enemy turn</label>\r\n          <img src=\"https://cdn-icons-png.flaticon.com/512/1377/1377064.png\" style={{width: 70, height: 70}} alt=\"\"/>\r\n        </div>\r\n        }\r\n\r\n      </div>\r\n      <div>\r\n        <button className=\"btn\"onClick={fetchCardsData}>Load data</button>\r\n        <button className=\"btn\"onClick={handleGraveyardOpen}>Show graveyard</button>\r\n        <button className=\"btn\"onClick={handleDeckCardsOpen}>Show cards in deck</button>\r\n      </div>\r\n      <div style={{width: 30, height: 50}} ></div>\r\n\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose(createEmptyCard())}style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a card to target</h2>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent  card={card}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isMulliganModalOpen} onRequestClose={() => mulliganCard(createEmptyCard())}style={{content: {width:'500px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a card to mulligan</h2>\r\n        {cardsInHand.map((card, index) =>(\r\n          <button onClick= { () => {mulliganCard(card)} }><CardComponent  card={card}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isGraveyardModalOpen} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Graveyard cards</h2>\r\n        {graveyardCards.map((card, index) =>(\r\n          <div><CardComponent  card={card}></CardComponent></div>\r\n        ))}\r\n        <button onClick={() => setIsGraveyardModalOpen(false)}>Close</button>\r\n      </Modal>\r\n      <Modal isOpen={isDeckCardsModalOpen} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Cards in deck</h2>\r\n        {cardsInDeck.map((card, index) =>(\r\n          <div><CardComponent  card={card}></CardComponent></div>\r\n        ))}\r\n        <button onClick={() => setIsDeckCardsModalOpen(false)}>Close</button>\r\n      </Modal>\r\n      <Modal isOpen={isRowsModalOpen} onRequestClose={() => handleRowsModalClose(-1)} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a row to traget</h2>\r\n        {affectableRows.map((row, index) =>(\r\n          <button style={{fontSize: '30px',}} onClick= { () => {handleRowsModalClose(row)} }>{row + 1}</button>\r\n        ))}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, userName)}>\r\n        <HandComponent  cardsInHand = {cardsInHand} cardInPlayChain={playChainCard}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnRows[thirdRow]} rowDroppableId={thirdRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[thirdRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnRows[secondRow]} rowDroppableId={secondRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[secondRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnRows[firstRow]} rowDroppableId={firstRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[firstRow]) ||''}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n        <div className=\"wonRounds\" style={{background: playerEndRoundBackground|| ''}}>\r\n          {renderWonRounds(wonRounds)} {playerEndRoundMessage}\r\n        </div>\r\n        <div className=\"boardMiddle\">\r\n          <div className=\"separator\"></div>\r\n          <div className=\"endRoundDiv\"><button className=\"endRoundButton\"onClick={() => endRoundFor(userName)}>End round</button></div>\r\n        </div>\r\n        <div className=\"wonRounds\" style={{background: enemyEndRoundBackground || ''}}>\r\n          {renderWonRounds(enemyWonRounds)} {enemyEndRoundMessage}\r\n        </div>\r\n      \r\n      <DragDropContext onDragEnd = {() => {}}>\r\n        <RowComponent cardsOnRow = {enemyCardsOnFirstRow} pointsOnRow={enemyPointsOnRows[firstRow]} rowDroppableId={firstRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[firstRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnSecondRow} pointsOnRow={enemyPointsOnRows[secondRow]} rowDroppableId={secondRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[secondRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnThirdRow} pointsOnRow={enemyPointsOnRows[thirdRow]} rowDroppableId={thirdRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[thirdRow]) ||''}></RowComponent>\r\n        <EnemyHandComponent cardsInHand={getEnemyHandBlankCards()} cardInPlayChain={createEmptyCard()}></EnemyHandComponent>\r\n      </DragDropContext>\r\n\r\n\r\n      \r\n      \r\n      <div className=\"enemyTag\"><div className=\"enemyName\">{enemyName} </div>: {enemyPointsOnRows.reduce((sum, e) => sum + e, 0)} </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}