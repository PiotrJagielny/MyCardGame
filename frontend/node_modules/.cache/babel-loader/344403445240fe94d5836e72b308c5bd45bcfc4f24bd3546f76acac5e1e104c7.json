{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\MainPageComponents\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst MainPage = () => {\n  _s();\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  let navigate = useNavigate();\n  let dispatch = useDispatch();\n  const RedirectToDeckBuilder = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.sonnect({}, onConnect);\n    navigate(\"/DeckBuilder\");\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\n  };\n  const onMessageReceived = () => {\n    if (payload.body.includes(\"Found enemy\")) {\n      let gameID = payload.body.split(\":\")[1];\n      dispatch({\n        type: \"SET_GAME_ID\",\n        payload: gameID\n      });\n      let message = userName + \":\" + gameID;\n      fetch(serverURL + '/button', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: message\n      });\n      navigate(\"/Duel\");\n    }\n  };\n  const RedirectToDuel = () => {\n    navigate(\"/Duel\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), \"This is game main page \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: RedirectToDeckBuilder,\n      children: \"Build your deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 72\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: RedirectToDuel,\n      children: \"Duel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 54\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"RUezdhBws9IeEw/c1RVbz4ux6do=\", false, function () {\n  return [useSelector, useSelector, useNavigate, useDispatch];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useNavigate","SockJS","over","useSelector","useDispatch","jsxDEV","_jsxDEV","stompClient","MainPage","_s","userName","state","serverURL","navigate","dispatch","RedirectToDeckBuilder","Sock","sonnect","onConnect","subscribe","onMessageReceived","payload","body","includes","gameID","split","type","message","fetch","method","headers","RedirectToDuel","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/MainPageComponents/MainPage.tsx"],"sourcesContent":["import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\n\r\n\r\nvar stompClient: any = null;\r\nconst MainPage = () => {\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n  let navigate = useNavigate();\r\n  let dispatch = useDispatch();\r\n  const RedirectToDeckBuilder = () =>{\r\n\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.sonnect({}, onConnect);\r\n    navigate(\"/DeckBuilder\");\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived );\r\n  }\r\n  const onMessageReceived = () => {\r\n    if(payload.body.includes(\"Found enemy\") ) {\r\n\r\n      let gameID = payload.body.split(\":\")[1]; \r\n      dispatch({type:\"SET_GAME_ID\", payload: gameID});\r\n      let message:string = userName + \":\" + gameID;\r\n      fetch(serverURL + '/button', {\r\n        method: 'PUT',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: message,\r\n      });\r\n      navigate(\"/Duel\");\r\n    }\r\n  }\r\n  const RedirectToDuel = () =>{\r\n    navigate(\"/Duel\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hello {userName}</h1>\r\n      This is game main page <br />\r\n      <button onClick={RedirectToDeckBuilder}>Build your deck</button> <br />\r\n      <button onClick={RedirectToDuel}>Duel</button> <br />\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default MainPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}