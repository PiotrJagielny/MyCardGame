{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DeckBuildingComponents\\\\DeckBuilderPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { DecksManager } from './DecksManager';\nimport './DeckBuilderPage.css';\nimport { useSelector } from 'react-redux';\nimport { CardsCollectionDisplay } from './CardsCollectionDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeckBuilderPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [cardsData, setCardsData] = useState([]);\n  const [cardsInDeck, setCardsInDeck] = useState([]);\n  const [currentDeck, setCurrentDeck] = useState(\"\");\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const refreshPage = () => {\n    window.location.reload();\n  };\n  const fetchCardsData = () => {\n    fetch(`${serverURL}/DeckBuilder/GetAllCards/${userName}/${currentDeck}`).then(res => res.json()).then(cardsData => {\n      setCardsData(cardsData);\n    }).catch(console.error);\n    fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}/${currentDeck}`).then(res => res.json()).then(cardsInDeck => {\n      setCardsInDeck(cardsInDeck);\n    }).catch(console.error);\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchCardsData();\n    return () => {\n      controller.abort();\n    };\n  }, [userName]);\n  const ChangeDecksState = async (cardToPost, PostURL) => {\n    let data = {\n      name: cardToPost.name\n    };\n    const response = await fetch(PostURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data.name)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to change deck state');\n    }\n    fetchCardsData();\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    let PostURL = '';\n    if (destination.droppableId === \"AllCards\") {\n      PostURL = `${serverURL}/DeckBuilder/PutCardFromDeckBack/${userName}/${currentDeck}`;\n    } else if (destination.droppableId === \"CardsInDeck\") {\n      PostURL = `${serverURL}/DeckBuilder/PutCardToDeck/${userName}/${currentDeck}`;\n    }\n    let cardDragged = {\n      name: result.draggableId,\n      points: 0,\n      cardInfo: \"\"\n    };\n    ChangeDecksState(cardDragged, PostURL);\n  };\n  const handleDecksSwitch = () => {\n    fetchCardsData();\n    fetchCardsData();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DeckBuilderPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build your deck! : Deck has to have 6 cards \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"You can click with right mouse button on a card, to get its info. If there is no card info, there wont be any text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Left click twice on a deck to select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Decks\",\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"All cards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"AllCards\",\n            children: /*#__PURE__*/_jsxDEV(CardsCollectionDisplay, {\n              Cards: cardsData,\n              refresh: refresh,\n              droppableName: \"AllCards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Cards in deck : \", currentDeck]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"AllCardsInDeck\",\n            children: /*#__PURE__*/_jsxDEV(CardsCollectionDisplay, {\n              Cards: cardsInDeck,\n              refresh: refresh,\n              droppableName: \"CardsInDeck\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"PlayersDecks\",\n          children: /*#__PURE__*/_jsxDEV(DecksManager, {\n            OnDecksSwitched: handleDecksSwitch,\n            currentDeck: currentDeck,\n            currentDeckSetter: setCurrentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(DeckBuilderPage, \"F6LW2PJHoahSnf29v3fjjkmhKSI=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = DeckBuilderPage;\nexport default DeckBuilderPage;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilderPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","DecksManager","useSelector","CardsCollectionDisplay","jsxDEV","_jsxDEV","DeckBuilderPage","_s","refresh","setRefresh","cardsData","setCardsData","cardsInDeck","setCardsInDeck","currentDeck","setCurrentDeck","userName","state","serverURL","refreshPage","window","location","reload","fetchCardsData","fetch","then","res","json","catch","console","error","controller","AbortController","abort","ChangeDecksState","cardToPost","PostURL","data","name","response","method","headers","body","JSON","stringify","ok","Error","onDragEnd","result","source","destination","droppableId","index","cardDragged","draggableId","points","cardInfo","handleDecksSwitch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Cards","droppableName","OnDecksSwitched","currentDeckSetter","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DeckBuildingComponents/DeckBuilderPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport {DecksManager} from './DecksManager';\r\nimport {Card} from './../Interfaces/Card';\r\nimport  './DeckBuilderPage.css';\r\nimport {useSelector} from 'react-redux';\r\nimport {CardsCollectionDisplay} from './CardsCollectionDisplay'; \r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\n\r\n\r\n\r\nconst DeckBuilderPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [cardsData, setCardsData] = useState<Card[]>([]);\r\n  const [cardsInDeck, setCardsInDeck] = useState<Card[]>([]);\r\n  const [currentDeck, setCurrentDeck] = useState<string>(\"\");\r\n\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  const fetchCardsData = () => {\r\n    fetch(`${serverURL}/DeckBuilder/GetAllCards/${userName}/${currentDeck}`)\r\n      .then((res) => res.json())\r\n      .then((cardsData: Card[]) => {\r\n        setCardsData(cardsData);\r\n      })\r\n      .catch(console.error);\r\n\r\n      fetch(`${serverURL}/DeckBuilder/GetCardsInDeck/${userName}/${currentDeck}`)\r\n      .then((res) => res.json())\r\n      .then((cardsInDeck: Card[]) => {\r\n        setCardsInDeck(cardsInDeck);\r\n      })\r\n      .catch(console.error);\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    fetchCardsData();\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [userName]);\r\n\r\n  const ChangeDecksState = async (cardToPost: Card, PostURL: string) =>{\r\n    let data = {name: cardToPost.name};\r\n    const response = await fetch(PostURL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data.name)\r\n    });\r\n\r\n    \r\n    if(!response.ok){\r\n      throw new Error('Failed to change deck state');\r\n    }\r\n\r\n    fetchCardsData();\r\n  };\r\n\r\n\r\n  const onDragEnd = (result:DropResult) => {\r\n    const {source, destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === source.droppableId && destination.index === source.index){return;}\r\n\r\n    let PostURL:string = '';\r\n\r\n    if(destination.droppableId === \"AllCards\"){\r\n      PostURL = `${serverURL}/DeckBuilder/PutCardFromDeckBack/${userName}/${currentDeck}`;\r\n    }\r\n    else if(destination.droppableId === \"CardsInDeck\"){\r\n      PostURL = `${serverURL}/DeckBuilder/PutCardToDeck/${userName}/${currentDeck}`\r\n    }\r\n\r\n    let cardDragged: Card = {name: result.draggableId, points: 0, cardInfo:\"\"};\r\n    \r\n    ChangeDecksState(cardDragged, PostURL); \r\n  }\r\n\r\n  const handleDecksSwitch = () => {\r\n    fetchCardsData();\r\n    fetchCardsData();\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"DeckBuilderPage\">\r\n      <h2>Build your deck! : Deck has to have 6 cards </h2>\r\n      <h4>You can click with right mouse button on a card, to get its info. If there is no card info, there wont be any text</h4>\r\n      <h4>Left click twice on a deck to select</h4>\r\n\r\n      \r\n\r\n      <div className=\"Decks\">\r\n\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div>\r\n            <h3>All cards</h3>\r\n           <div className = \"AllCards\">\r\n              <CardsCollectionDisplay Cards={cardsData} refresh={refresh} droppableName=\"AllCards\"></CardsCollectionDisplay>\r\n           </div>\r\n          </div>\r\n          <div>\r\n            <h3> Cards in deck : {currentDeck}</h3>\r\n            <div className = \"AllCardsInDeck\">\r\n              <CardsCollectionDisplay Cards={cardsInDeck} refresh={refresh} droppableName=\"CardsInDeck\"></CardsCollectionDisplay>\r\n            </div>\r\n          </div>\r\n          <div className=\"PlayersDecks\">\r\n            <DecksManager OnDecksSwitched={handleDecksSwitch} currentDeck={currentDeck} currentDeckSetter={setCurrentDeck} ></DecksManager>\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckBuilderPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}