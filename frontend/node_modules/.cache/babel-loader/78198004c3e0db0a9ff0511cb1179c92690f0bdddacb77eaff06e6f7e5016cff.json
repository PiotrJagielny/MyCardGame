{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DuelPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnBoard, setPointsOnBoard] = useState(0);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [cardsInHand2, setCardsInHand2] = useState([]);\n  const [cardsOnBoard2, setCardsOnBoard2] = useState([]);\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState([]);\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState([]);\n  const [pointsOnBoard2, setPointsOnBoard2] = useState(0);\n  const [wonRounds2, setWonRounds2] = useState(0);\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState(false);\n  const [didWon2, setDidWon2] = useState(false);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\n    fetchCardsData();\n  };\n  const [deckData, setDeckData] = useState([]);\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck').then(res => res.json()).then(deckData => {\n      setDeckData(deckData);\n    }).catch(console.error);\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  let firstPlayer = \"first\";\n  let secondPlayer = \"second\";\n  useEffect(() => {\n    const controller = new AbortController();\n    if (deckData.length > 0) {\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(deckData),\n        signal: controller.signal\n      });\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [deckData]);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetchData(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand, setCardsInHand);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`, cardsOnBoard, setCardsOnBoard);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow, setCardsOnSecondRow);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow, setCardsOnThirdRow);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard, setPointsOnBoard);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds, setWonRounds);\n    fetchData(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon, setDidWon);\n    fetchData(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2, setCardsInHand2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`, cardsOnBoard2, setCardsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2, setCardsOnSecondRow2);\n    fetchData(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2, setCardsOnThirdRow2);\n    fetchData(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2, setPointsOnBoard2);\n    fetchData(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2, setIsTurnOfPlayer2);\n    fetchData(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2, setWonRounds2);\n    fetchData(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2, setDidWon2);\n    setRefresh(true);\n  };\n  const onDragEndOf = async (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    let cardDragged = {\n      name: result.draggableId,\n      points: 0\n    };\n    let postOnRowNumberOf = -1;\n    if (destination.droppableId === \"BoardRow1\") {\n      postOnRowNumberOf = 0;\n    } else if (destination.droppableId === \"BoardRow2\") {\n      postOnRowNumberOf = 1;\n    } else if (destination.droppableId === \"BoardRow3\") {\n      postOnRowNumberOf = 2;\n    }\n    const response = await fetch(`http://localhost:8000/Duel/getPossibleTargets/${player}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    });\n    if (response.ok) {\n      setTargetableCards(await response.json());\n      console.log(targetableCards);\n    }\n    setIsModalOpen(true);\n    console.log(targetableCards);\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\n    fetchCardsData();\n  };\n  const playDraggedCard = async (postURL, cardDragged, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    await fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Let the battle begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => endRoundFor(firstPlayer),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Did you won: \", didWon.toString(), \"|\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Won rounds: \", wonRounds, \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Is your turn: \", isTurnOfPlayer1.toString(), \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose({\n        name: \"Not\",\n        points: 1\n      }),\n      children: targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          color: 'blue',\n          image: 'none',\n          name: card.name,\n          points: card.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, firstPlayer),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnBoard,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, secondPlayer),\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow2,\n        pointsOnRow: pointsOnBoard2,\n        rowDroppableId: \"BoardRow3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => endRoundFor(secondPlayer),\n        children: \"End round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Did you won: \", didWon2.toString(), \"|\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Won rounds: \", wonRounds2, \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" |Is your turn: \", isTurnOfPlayer2.toString(), \"| \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"bTWNRZSRlIUPHuYs63eD4757/vA=\");\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","Modal","CardComponent","jsxDEV","_jsxDEV","DuelPage","_s","refresh","setRefresh","isModalOpen","setIsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnBoard","setPointsOnBoard","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","cardsInHand2","setCardsInHand2","cardsOnBoard2","setCardsOnBoard2","cardsOnSecondRow2","setCardsOnSecondRow2","cardsOnThirdRow2","setCardsOnThirdRow2","pointsOnBoard2","setPointsOnBoard2","wonRounds2","setWonRounds2","isTurnOfPlayer2","setIsTurnOfPlayer2","didWon2","setDidWon2","targetableCards","setTargetableCards","handleModalClose","card","playDraggedCard","player","postOnRowNumberOf","cardDragged","fetchCardsData","deckData","setDeckData","controller","AbortController","fetch","then","res","json","catch","console","error","abort","firstPlayer","secondPlayer","length","method","headers","body","JSON","stringify","signal","fetchData","url","data","setter","onDragEndOf","result","destination","droppableId","name","draggableId","points","response","ok","log","postURL","cardTargetted","args","endRoundFor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toString","isOpen","onRequestClose","map","index","color","image","onDragEnd","cardsOnRow","pointsOnRow","rowDroppableId","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\n\r\nconst DuelPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard, setPointsOnBoard] = useState<number>(0);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n  const [cardsInHand2, setCardsInHand2] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard2, setCardsOnBoard2] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow2, setCardsOnSecondRow2] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow2, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [pointsOnBoard2, setPointsOnBoard2] = useState<number>(0);\r\n  const [wonRounds2, setWonRounds2] = useState<number>(0);\r\n  const [isTurnOfPlayer2, setIsTurnOfPlayer2] = useState<boolean>(false);\r\n  const [didWon2, setDidWon2] = useState<boolean>(false);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n\r\n\r\n\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\r\n    fetchCardsData();\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  const [deckData, setDeckData] = useState<Card[]>([]);\r\n\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    fetch('http://localhost:8000/DeckBuilder/GetCardsInDeck')\r\n      .then((res) => res.json())\r\n      .then((deckData: Card[]) => {\r\n        setDeckData(deckData);\r\n      })\r\n      .catch(console.error);\r\n\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n  let firstPlayer:string = \"first\";\r\n  let secondPlayer:string = \"second\";\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    if (deckData.length > 0) {\r\n      fetch(`http://localhost:8000/Duel/SetupDecks?firstUser=${\"first\"}&secondUser=${\"second\"}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(deckData),\r\n        signal: controller.signal\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n\r\n  }, [deckData]);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${firstPlayer}`, cardsInHand ,setCardsInHand);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${0}`,cardsOnBoard ,setCardsOnBoard);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${1}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${firstPlayer}/${2}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${firstPlayer}`, pointsOnBoard ,setPointsOnBoard);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${firstPlayer}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${firstPlayer}`, wonRounds ,setWonRounds);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${firstPlayer}`, didWon ,setDidWon);\r\n\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getHandCards/${secondPlayer}`, cardsInHand2 ,setCardsInHand2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${0}`,cardsOnBoard2 ,setCardsOnBoard2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${1}`, cardsOnSecondRow2 ,setCardsOnSecondRow2);\r\n    fetchData<Card[]>(`http://localhost:8000/Duel/getCardsOnRow/${secondPlayer}/${2}`, cardsOnThirdRow2 ,setCardsOnThirdRow2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getBoardPoints/${secondPlayer}`, pointsOnBoard2 ,setPointsOnBoard2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/isTurnOf/${secondPlayer}`, isTurnOfPlayer2 ,setIsTurnOfPlayer2);\r\n    fetchData<number>(`http://localhost:8000/Duel/getWonRounds/${secondPlayer}`, wonRounds2 ,setWonRounds2);\r\n    fetchData<boolean>(`http://localhost:8000/Duel/didWon/${secondPlayer}`, didWon2 ,setDidWon2);\r\n\r\n    setRefresh(true);\r\n  }\r\n\r\n  const onDragEndOf = async (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    let cardDragged: Card = {name: result.draggableId, points: 0};\r\n    let postOnRowNumberOf:number = -1;\r\n\r\n    if(destination.droppableId === \"BoardRow1\"){\r\n      postOnRowNumberOf = 0;\r\n    }\r\n    else if(destination.droppableId === \"BoardRow2\"){\r\n      postOnRowNumberOf = 1;\r\n    }\r\n    else if(destination.droppableId === \"BoardRow3\"){\r\n      postOnRowNumberOf = 2;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:8000/Duel/getPossibleTargets/${player}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    });\r\n\r\n    if(response.ok) {\r\n      setTargetableCards(await response.json());\r\n      console.log(targetableCards);\r\n    }\r\n\r\n    setIsModalOpen(true);\r\n    console.log(targetableCards);\r\n\r\n    playDraggedCard(`http://localhost:8000/Duel/playCard?userName=${player}&rowNumber=${postOnRowNumberOf}`, cardDragged);\r\n    fetchCardsData();\r\n\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardDragged:Card, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    await fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`http://localhost:8000/Duel/endRound?userName=${player}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    });\r\n}\r\n\r\n  return (\r\n    \r\n    <div>\r\n      \r\n\r\n      <div>\r\n        <label>Let the battle begin</label>\r\n        <button onClick={fetchCardsData}>Load data</button>\r\n      </div>\r\n\r\n      <div>\r\n        <button onClick={() => endRoundFor(firstPlayer)}>End round</button>\r\n        <label> |Did you won: {didWon.toString()}|</label>\r\n        <label> |Won rounds: {wonRounds}| </label>\r\n        <label> |Is your turn: {isTurnOfPlayer1.toString()}| </label>\r\n      </div>\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose({name: \"Not\", points: 1})}>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent color={'blue'} image={'none'} name={card.name} points={card.points}></CardComponent></button>\r\n        ))}\r\n        {/* <button onClick={handleModalClose}>Close</button> */}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, firstPlayer)}>\r\n        <HandComponent cardsInHand = {cardsInHand}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnBoard} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n      \r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, secondPlayer)}>\r\n        <RowComponent cardsOnRow = {cardsOnBoard2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow1\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow2\"}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow2} pointsOnRow={pointsOnBoard2} rowDroppableId={\"BoardRow3\"}></RowComponent>\r\n        \r\n        <HandComponent cardsInHand = {cardsInHand2}></HandComponent>\r\n      </DragDropContext>\r\n      \r\n      \r\n      <div>\r\n        <button onClick={() => endRoundFor(secondPlayer)}>End round</button>\r\n        <label> |Did you won: {didWon2.toString()}|</label>\r\n        <label> |Won rounds: {wonRounds2}| </label>\r\n        <label> |Is your turn: {isTurnOfPlayer2.toString()}| </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}