{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DuelComponents\\\\DuelPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport HandComponent from './HandComponent';\nimport RowComponent from './RowComponent';\nimport './DuelPage.css';\nimport Modal from 'react-modal';\nimport CardComponent from '../CardComponent';\nimport { useSelector } from 'react-redux';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nvar firstRow = 0;\nvar secondRow = 1;\nvar thirdRow = 2;\nvar firstRowId = \"Row 1\";\nvar secondRowId = \"Row 2\";\nvar thirdRowId = \"Row 3\";\nvar rowStatusToImageUrl = new Map([[\"\", \"\"], [\"Rain\", \"https://parspng.com/wp-content/uploads/2022/06/rainpng.parspng.com-4.png\"]]);\nconst DuelPage = () => {\n  _s();\n  let navigate = useNavigate();\n  const [refresh, setRefresh] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\n  const [cardsInHand, setCardsInHand] = useState([]);\n  const [cardsOnBoard, setCardsOnBoard] = useState([]);\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState([]);\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState([]);\n  const [pointsOnRows, setPointsOnRows] = useState([]);\n  const [rowsStatus, setRowsStatus] = useState([]);\n  const [wonRounds, setWonRounds] = useState(0);\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState(false);\n  const [didWon, setDidWon] = useState(false);\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState([]);\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState([]);\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState([]);\n  const [enemyPointsOnBoard, setenemyPointsOnBoard] = useState(0);\n  const [enemyPointsOnRows, setEnemyPointsOnRows] = useState([]);\n  const [enemyWonRounds, setenemyWonRounds] = useState(0);\n  const [isEnemyTurn, setisEnemyTurn] = useState(false);\n  const [didEnemyWon, setdidEnemyWon] = useState(false);\n  const [enemyRowsStatus, setEnemyRowsStatus] = useState([]);\n  const [targetableCards, setTargetableCards] = useState([]);\n  const [affectableRows, setAffectableRows] = useState([]);\n  const [enemyName, setEnemyName] = useState(\"\");\n  const gameID = useSelector(state => state.gameID);\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const connectToSocket = () => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnect);\n  };\n  const onConnect = () => {\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived);\n    stompClient.subscribe('/user/' + userName + '/enemyEndRound', enemyEndRoundTrigger);\n  };\n  const onMessageReceived = payload => {\n    fetchCardsData();\n  };\n  const enemyEndRoundTrigger = payload => {\n    console.log(payload);\n  };\n  useEffect(() => {\n    connectToSocket();\n    const controller = new AbortController();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  const fetchData = (url, data, setter) => {\n    fetch(url).then(res => res.json()).then(data => {\n      setter(data);\n    }).catch(console.error);\n  };\n  const fetchCardsData = () => {\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`).then(res => res.text()).then(data => {\n      setEnemyName(data);\n      let userEnemy = data;\n      fetchData(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand, setCardsInHand);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`, cardsOnBoard, setCardsOnBoard);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow, setCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow, setCardsOnThirdRow);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1, setIsTurnOfPlayer1);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds, setWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon, setDidWon);\n      fetchData(`${serverURL}/Duel/getRowsPoints/${userName}/${gameID}`, pointsOnRows, setPointsOnRows);\n      fetchData(`${serverURL}/Duel/getRowsStatus/${userName}/${gameID}`, rowsStatus, setRowsStatus);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`, enemyCardsOnFirstRow, setenemyCardsOnFirstRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow, setenemyCardsOnSecondRow);\n      fetchData(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow, setCardsOnThirdRow2);\n      fetchData(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn, setisEnemyTurn);\n      fetchData(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds, setenemyWonRounds);\n      fetchData(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon, setdidEnemyWon);\n      fetchData(`${serverURL}/Duel/getRowsPoints/${userEnemy}/${gameID}`, enemyPointsOnRows, setEnemyPointsOnRows);\n      fetchData(`${serverURL}/Duel/getRowsStatus/${userEnemy}/${gameID}`, enemyRowsStatus, setEnemyRowsStatus);\n    }).then(() => {\n      if (wonRounds === enemyWonRounds && wonRounds === 2) {\n        alert(\"Draw\", \"https://c4.wallpaperflare.com/wallpaper/103/477/186/forest-light-nature-forest-wallpaper-preview.jpg\");\n      } else if (wonRounds === 2) {\n        alert(\"You won!\", \"https://png.pngtree.com/thumb_back/fh260/background/20220523/pngtree-stage-podium-with-rays-of-spotlights-for-award-ceremony-winner-with-image_1400291.jpg\");\n      } else if (enemyWonRounds === 2) {\n        alert(\"You lost!\", \"https://c4.wallpaperflare.com/wallpaper/33/477/228/rain-showers-forest-illustration-wallpaper-preview.jpg\");\n      }\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  const alert = (msg, imageURL) => {\n    const alert = document.createElement('div');\n    alert.classList.add('alert');\n    const alertButton = document.createElement('button');\n    alertButton.innerText = 'Back to main menu';\n    alert.setAttribute('style', `\n      position: fixed;\n      top: 30%;\n      left:50%;\n      padding:20px;\n      border-radius: 10px;\n      box-shadow: 0 10px 5px 0 #00000022; \n      display:flex;\n      flex-direction:column;\n      background-image: url(${imageURL});\n      background-size: cover;\n      background-position: center;\n      height: 200px;\n      width: 200px;\n    `);\n    alertButton.setAttribute('style', `\n      border: 1px solidd #333;\n      background:white;\n      border-radius: 5px;\n      padding: 5px;\n    \n    `);\n    alert.innerHTML = `<span style=\"\n      font-size: 20px;\n      padding: 29%;\n      padding-left: 59px;\n      \">\n     ${msg}\n     </span>`;\n    alert.appendChild(alertButton);\n    alertButton.addEventListener('click', e => {\n      alert.remove();\n      navigate(\"/Main\");\n    });\n    document.body.appendChild(alert);\n  };\n  const [cardDragged, setCardDragged] = useState({\n    name: \"\",\n    points: 0\n  });\n  const [playChainCard, setPlayChainCard] = useState({\n    name: \"\",\n    points: 0\n  });\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState(0);\n  const [cardAffected, setCardAffected] = useState({\n    name: \"points\",\n    points: 0\n  });\n  const handleModalClose = card => {\n    setIsModalOpen(false);\n    setCardAffected(card);\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const possibleAffectedRows = await response.json();\n      await makeMove(possibleAffectedRows);\n    });\n  }, [cardAffected]);\n  const makeMove = async possibleAffectedRows => {\n    if (possibleAffectedRows.length === 0) {\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardAffected);\n      fetchCardsData();\n    } else {\n      setAffectableRows(possibleAffectedRows);\n      setIsRowsModalOpen(true);\n    }\n  };\n  const handleRowsModalClose = affectedRow => {\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`, cardAffected);\n    fetchCardsData();\n    setIsRowsModalOpen(false);\n  };\n  const onDragEndOf = (result, player) => {\n    const {\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === \"Hand\") {\n      return;\n    }\n    setPostOnRowNumberOf(-1);\n    if (destination.droppableId === firstRowId) {\n      setPostOnRowNumberOf(0);\n    } else if (destination.droppableId === secondRowId) {\n      setPostOnRowNumberOf(1);\n    } else if (destination.droppableId === thirdRowId) {\n      setPostOnRowNumberOf(2);\n    }\n    setCardDragged({\n      name: result.draggableId,\n      points: 0\n    });\n  };\n  useEffect(() => {\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cardDragged)\n    }).then(async response => {\n      const targetableCardsResponse = await response.json();\n      await ensure(targetableCardsResponse);\n    });\n  }, [cardDragged]);\n  const ensure = async targetableCardsArg => {\n    if (targetableCardsArg.length === 0) {\n      setCardAffected({\n        name: \"noCard\",\n        points: 0\n      });\n    } else {\n      setTargetableCards(targetableCardsArg);\n      setIsModalOpen(true);\n    }\n  };\n  const playDraggedCard = async (postURL, cardTargetted) => {\n    const args = [cardDragged, cardTargetted];\n    fetch(postURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(args)\n    }).then(res => res.json()).then(cardChained => {\n      setPlayChainCard(cardChained);\n      stompClient.send('/app/sendTrigger', {}, userName, userName);\n    });\n  };\n  const endRoundFor = player => {\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: null\n    }).then(() => {\n      stompClient.send('/app/sendEndRoundTrigger', {}, userName);\n    });\n  };\n  const renderWonRounds = wonRoudnsOfPlayer => {\n    const wonRoundsDivs = [];\n    for (let i = 0; i < wonRoudnsOfPlayer; i++) {\n      wonRoundsDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn-icons-png.flaticon.com/512/6941/6941697.png\",\n          style: {\n            width: 30,\n            height: 30\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 39\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 26\n      }, this));\n    }\n    if (wonRoundsDivs.length === 0) {\n      wonRoundsDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 30,\n          height: 30\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 26\n      }, this));\n    }\n    return wonRoundsDivs;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerName\",\n      children: [userName, \" : \", pointsOnRows.reduce((sum, e) => sum + e, 0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerInfo\",\n      children: isTurnOfPlayer1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Your turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn0.iconfinder.com/data/icons/crime-protection-people-rounded/110/Sword-512.png\",\n          style: {\n            width: 70,\n            height: 70\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enemy turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn-icons-png.flaticon.com/512/1377/1377064.png\",\n          style: {\n            width: 70,\n            height: 70\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: fetchCardsData,\n        children: \"Load data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 30,\n        height: 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => handleModalClose({\n        name: \"\",\n        points: 1\n      }),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a card to target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), targetableCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleModalClose(card);\n        },\n        children: /*#__PURE__*/_jsxDEV(CardComponent, {\n          name: card.name,\n          points: card.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRowsModalOpen,\n      onRequestClose: () => handleRowsModalClose(-1),\n      style: {\n        content: {\n          width: '300px',\n          height: '200px',\n          background: 'gray'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose a row to traget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), affectableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '30px'\n        },\n        onClick: () => {\n          handleRowsModalClose(row);\n        },\n        children: row + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEndOf(result, userName),\n      children: [/*#__PURE__*/_jsxDEV(HandComponent, {\n        cardsInHand: cardsInHand,\n        cardInPlayChain: playChainCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnThirdRow,\n        pointsOnRow: pointsOnRows[thirdRow],\n        rowDroppableId: thirdRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[thirdRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnSecondRow,\n        pointsOnRow: pointsOnRows[secondRow],\n        rowDroppableId: secondRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[secondRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: cardsOnBoard,\n        pointsOnRow: pointsOnRows[firstRow],\n        rowDroppableId: firstRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[firstRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wonRounds\",\n      children: renderWonRounds(wonRounds)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardMiddle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endRoundDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"endRoundButton\",\n          onClick: () => endRoundFor(userName),\n          children: \"End round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wonRounds\",\n      children: renderWonRounds(enemyWonRounds)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: () => {},\n      children: [/*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnFirstRow,\n        pointsOnRow: enemyPointsOnRows[firstRow],\n        rowDroppableId: firstRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[firstRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnSecondRow,\n        pointsOnRow: enemyPointsOnRows[secondRow],\n        rowDroppableId: secondRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[secondRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowComponent, {\n        cardsOnRow: enemyCardsOnThirdRow,\n        pointsOnRow: enemyPointsOnRows[thirdRow],\n        rowDroppableId: thirdRowId,\n        rowStatusImageURL: rowStatusToImageUrl.get(rowsStatus[thirdRow]) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Tag\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemyName\",\n        children: [enemyName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 28\n      }, this), \": \", enemyPointsOnRows.reduce((sum, e) => sum + e, 0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n};\n_s(DuelPage, \"BF8/nbm1uAP/+LMq1FJFjE2XGx8=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useSelector];\n});\n_c = DuelPage;\nexport default DuelPage;\nvar _c;\n$RefreshReg$(_c, \"DuelPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","HandComponent","RowComponent","Modal","CardComponent","useSelector","SockJS","over","useNavigate","jsxDEV","_jsxDEV","stompClient","firstRow","secondRow","thirdRow","firstRowId","secondRowId","thirdRowId","rowStatusToImageUrl","Map","DuelPage","_s","navigate","refresh","setRefresh","isModalOpen","setIsModalOpen","isRowsModalOpen","setIsRowsModalOpen","cardsInHand","setCardsInHand","cardsOnBoard","setCardsOnBoard","cardsOnSecondRow","setCardsOnSecondRow","cardsOnThirdRow","setCardsOnThirdRow","pointsOnRows","setPointsOnRows","rowsStatus","setRowsStatus","wonRounds","setWonRounds","isTurnOfPlayer1","setIsTurnOfPlayer1","didWon","setDidWon","enemyCardsOnFirstRow","setenemyCardsOnFirstRow","enemyCardsOnSecondRow","setenemyCardsOnSecondRow","enemyCardsOnThirdRow","setCardsOnThirdRow2","enemyPointsOnBoard","setenemyPointsOnBoard","enemyPointsOnRows","setEnemyPointsOnRows","enemyWonRounds","setenemyWonRounds","isEnemyTurn","setisEnemyTurn","didEnemyWon","setdidEnemyWon","enemyRowsStatus","setEnemyRowsStatus","targetableCards","setTargetableCards","affectableRows","setAffectableRows","enemyName","setEnemyName","gameID","state","userName","serverURL","connectToSocket","Sock","connect","onConnect","subscribe","onMessageReceived","enemyEndRoundTrigger","payload","fetchCardsData","console","log","controller","AbortController","abort","fetchData","url","data","setter","fetch","then","res","json","catch","error","text","userEnemy","alert","msg","imageURL","document","createElement","classList","add","alertButton","innerText","setAttribute","innerHTML","appendChild","addEventListener","e","remove","body","cardDragged","setCardDragged","name","points","playChainCard","setPlayChainCard","postOnRowNumberOf","setPostOnRowNumberOf","cardAffected","setCardAffected","handleModalClose","card","method","headers","JSON","stringify","response","possibleAffectedRows","makeMove","length","playDraggedCard","handleRowsModalClose","affectedRow","onDragEndOf","result","player","destination","droppableId","draggableId","targetableCardsResponse","ensure","targetableCardsArg","postURL","cardTargetted","args","cardChained","send","endRoundFor","renderWonRounds","wonRoudnsOfPlayer","wonRoundsDivs","i","push","children","src","style","width","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","reduce","sum","onClick","isOpen","onRequestClose","content","background","map","index","row","fontSize","onDragEnd","cardInPlayChain","cardsOnRow","pointsOnRow","rowDroppableId","rowStatusImageURL","get","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DuelComponents/DuelPage.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Card} from './../Interfaces/Card';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport HandComponent from './HandComponent';\r\nimport RowComponent from './RowComponent';\r\nimport './DuelPage.css';\r\nimport Modal from 'react-modal';\r\nimport CardComponent from '../CardComponent';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nvar stompClient:any = null;\r\nvar firstRow: number = 0;\r\nvar secondRow: number = 1;\r\nvar thirdRow: number = 2;\r\nvar firstRowId:string = \"Row 1\";\r\nvar secondRowId:string = \"Row 2\";\r\nvar thirdRowId:string = \"Row 3\";\r\nvar rowStatusToImageUrl: Map<string,string> = new Map<string,string>([\r\n  [\"\", \"\"],\r\n  [\"Rain\", \"https://parspng.com/wp-content/uploads/2022/06/rainpng.parspng.com-4.png\"],\r\n]);\r\nconst DuelPage = () => {\r\n\r\n  let navigate = useNavigate();\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isRowsModalOpen, setIsRowsModalOpen] = useState(false);\r\n\r\n  const [cardsInHand, setCardsInHand] = useState<Card[]>([]);\r\n\r\n  const [cardsOnBoard, setCardsOnBoard] = useState<Card[]>([]);\r\n  const [cardsOnSecondRow, setCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [cardsOnThirdRow, setCardsOnThirdRow] = useState<Card[]>([]);\r\n\r\n  const [pointsOnRows, setPointsOnRows] = useState<number[]>([]);\r\n  const [rowsStatus, setRowsStatus] = useState<string[]>([]);\r\n  const [wonRounds, setWonRounds] = useState<number>(0);\r\n  const [isTurnOfPlayer1, setIsTurnOfPlayer1] = useState<boolean>(false);\r\n  const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n\r\n  const [enemyCardsOnFirstRow, setenemyCardsOnFirstRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnSecondRow, setenemyCardsOnSecondRow] = useState<Card[]>([]);\r\n  const [enemyCardsOnThirdRow, setCardsOnThirdRow2] = useState<Card[]>([]);\r\n\r\n  const [enemyPointsOnBoard, setenemyPointsOnBoard] = useState<number>(0);\r\n  const [enemyPointsOnRows, setEnemyPointsOnRows] = useState<number[]>([]);\r\n  const [enemyWonRounds, setenemyWonRounds] = useState<number>(0);\r\n  const [isEnemyTurn, setisEnemyTurn] = useState<boolean>(false);\r\n  const [didEnemyWon, setdidEnemyWon] = useState<boolean>(false);\r\n  const [enemyRowsStatus, setEnemyRowsStatus] = useState<string[]>([]);\r\n\r\n  const [targetableCards, setTargetableCards] = useState<Card[]>([]);\r\n  const [affectableRows, setAffectableRows] = useState<number[]>([]);\r\n  const [enemyName, setEnemyName] = useState<string>(\"\");\r\n\r\n\r\n\r\n  const gameID = useSelector<StateData, string>((state) => state.gameID);\r\n  const userName= useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL= useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n\r\n\r\n\r\n  const connectToSocket= () =>{\r\n    let Sock = new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnect);\r\n  }\r\n  const onConnect = () => {\r\n    stompClient.subscribe('/user/' + userName + '/game', onMessageReceived );\r\n    stompClient.subscribe('/user/' + userName + '/enemyEndRound', enemyEndRoundTrigger);\r\n  }\r\n  const onMessageReceived = (payload: any) => {\r\n    fetchCardsData();\r\n  }\r\n  const enemyEndRoundTrigger = (payload: any) => {\r\n    console.log(payload);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    connectToSocket();\r\n    const controller = new AbortController();\r\n      return () => {\r\n        controller.abort();\r\n      };\r\n  }, []);\r\n\r\n\r\n  const fetchData = <T,>(url: string,data: T ,setter: React.Dispatch<React.SetStateAction<T>>) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data: T) => {\r\n        setter(data);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  \r\n  const fetchCardsData = () => {\r\n    fetch(`${serverURL}/Duel/getEnemyOf/${userName}/${gameID}`)\r\n      .then((res) => res.text())\r\n      .then((data: string) => {\r\n        setEnemyName(data);\r\n        let userEnemy:string = data;\r\n        fetchData<Card[]>(`${serverURL}/Duel/getHandCards/${userName}/${gameID}`, cardsInHand ,setCardsInHand);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${0}/${gameID}`,cardsOnBoard ,setCardsOnBoard);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${1}/${gameID}`, cardsOnSecondRow ,setCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userName}/${2}/${gameID}`, cardsOnThirdRow ,setCardsOnThirdRow);\r\n        fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userName}/${gameID}`, isTurnOfPlayer1 ,setIsTurnOfPlayer1);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userName}/${gameID}`, wonRounds ,setWonRounds);\r\n        fetchData<boolean>(`${serverURL}/Duel/didWon/${userName}/${gameID}`, didWon ,setDidWon);\r\n        fetchData<number[]>(`${serverURL}/Duel/getRowsPoints/${userName}/${gameID}`, pointsOnRows,setPointsOnRows);\r\n        fetchData<string[]>(`${serverURL}/Duel/getRowsStatus/${userName}/${gameID}`, rowsStatus,setRowsStatus);\r\n\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${0}/${gameID}`,enemyCardsOnFirstRow ,setenemyCardsOnFirstRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${1}/${gameID}`, enemyCardsOnSecondRow,setenemyCardsOnSecondRow);\r\n        fetchData<Card[]>(`${serverURL}/Duel/getCardsOnRow/${userEnemy}/${2}/${gameID}`, enemyCardsOnThirdRow ,setCardsOnThirdRow2);\r\n        fetchData<boolean>(`${serverURL}/Duel/isTurnOf/${userEnemy}/${gameID}`, isEnemyTurn ,setisEnemyTurn);\r\n        fetchData<number>(`${serverURL}/Duel/getWonRounds/${userEnemy}/${gameID}`, enemyWonRounds ,setenemyWonRounds);\r\n        fetchData<boolean>(`${serverURL}/Duel/didWon/${userEnemy}/${gameID}`, didEnemyWon ,setdidEnemyWon);\r\n        fetchData<number[]>(`${serverURL}/Duel/getRowsPoints/${userEnemy}/${gameID}`, enemyPointsOnRows,setEnemyPointsOnRows);\r\n        fetchData<string[]>(`${serverURL}/Duel/getRowsStatus/${userEnemy}/${gameID}`, enemyRowsStatus,setEnemyRowsStatus);\r\n\r\n      }).then(() => {\r\n        if(wonRounds === enemyWonRounds && wonRounds === 2) {\r\n          alert(\"Draw\",\"https://c4.wallpaperflare.com/wallpaper/103/477/186/forest-light-nature-forest-wallpaper-preview.jpg\" );\r\n        }\r\n        else if(wonRounds === 2) {\r\n          alert(\"You won!\",\"https://png.pngtree.com/thumb_back/fh260/background/20220523/pngtree-stage-podium-with-rays-of-spotlights-for-award-ceremony-winner-with-image_1400291.jpg\" );\r\n        }\r\n        else if(enemyWonRounds === 2) {\r\n          alert(\"You lost!\",\"https://c4.wallpaperflare.com/wallpaper/33/477/228/rain-showers-forest-illustration-wallpaper-preview.jpg\" );\r\n        }\r\n\r\n      })\r\n      .catch(console.error);\r\n\r\n    setRefresh(true);\r\n  }\r\n  const alert= (msg:string, imageURL:string) => {\r\n    const alert = document.createElement('div');\r\n    alert.classList.add('alert');\r\n    const alertButton = document.createElement('button');\r\n    alertButton.innerText = 'Back to main menu';\r\n    alert.setAttribute('style', `\r\n      position: fixed;\r\n      top: 30%;\r\n      left:50%;\r\n      padding:20px;\r\n      border-radius: 10px;\r\n      box-shadow: 0 10px 5px 0 #00000022; \r\n      display:flex;\r\n      flex-direction:column;\r\n      background-image: url(${imageURL});\r\n      background-size: cover;\r\n      background-position: center;\r\n      height: 200px;\r\n      width: 200px;\r\n    `);\r\n    alertButton.setAttribute('style', `\r\n      border: 1px solidd #333;\r\n      background:white;\r\n      border-radius: 5px;\r\n      padding: 5px;\r\n    \r\n    `);\r\n    alert.innerHTML= `<span style=\"\r\n      font-size: 20px;\r\n      padding: 29%;\r\n      padding-left: 59px;\r\n      \">\r\n     ${msg}\r\n     </span>`;\r\n    alert.appendChild(alertButton);\r\n    alertButton.addEventListener('click',(e) => {\r\n      alert.remove();\r\n      navigate(\"/Main\");\r\n    });\r\n    document.body.appendChild(alert);\r\n  }\r\n\r\n\r\n\r\n  const [cardDragged, setCardDragged] = useState<Card>({name: \"\", points: 0});\r\n  const [playChainCard, setPlayChainCard] = useState<Card>({name: \"\", points: 0});\r\n  const [postOnRowNumberOf, setPostOnRowNumberOf] = useState<number>(0);\r\n  const [cardAffected, setCardAffected] = useState<Card>({name: \"points\", points: 0});\r\n  const handleModalClose = (card: Card) => {\r\n    setIsModalOpen(false);\r\n    setCardAffected(card);\r\n  };\r\n  useEffect(() => {\r\n    fetch(`${serverURL}/Duel/getPossibleRowsToAffect/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const possibleAffectedRows = await response.json();\r\n\r\n      await makeMove(possibleAffectedRows);\r\n\r\n    });\r\n\r\n  }, [cardAffected]);\r\n  \r\n\r\n  const makeMove = async (possibleAffectedRows: number[]) => {\r\n    if(possibleAffectedRows.length === 0) {\r\n      playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${-1}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`,  cardAffected);\r\n      fetchCardsData();\r\n    } \r\n    else {\r\n      setAffectableRows(possibleAffectedRows);\r\n      setIsRowsModalOpen(true);\r\n    } \r\n\r\n  }\r\n  const handleRowsModalClose = (affectedRow: number) => {\r\n    playDraggedCard(`${serverURL}/Duel/playCard?userName=${userName}&affectedRow=${affectedRow}&rowNumber=${postOnRowNumberOf}&gameID=${gameID}`,  cardAffected);\r\n    fetchCardsData();\r\n    setIsRowsModalOpen(false);\r\n  }\r\n\r\n\r\n  const onDragEndOf = (result:DropResult, player:string) => {\r\n    const {destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === \"Hand\"){return;}\r\n\r\n    setPostOnRowNumberOf(-1);\r\n    if(destination.droppableId === firstRowId){\r\n      setPostOnRowNumberOf(0);\r\n    }\r\n    else if(destination.droppableId === secondRowId){\r\n      setPostOnRowNumberOf(1);\r\n    }\r\n    else if(destination.droppableId === thirdRowId){\r\n      setPostOnRowNumberOf(2);\r\n    }\r\n    setCardDragged({name: result.draggableId, points: 0});\r\n\r\n\r\n\r\n  }\r\n  useEffect( () => {\r\n    fetch(`${serverURL}/Duel/getPossibleTargets/${userName}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(cardDragged)\r\n    }).then(async (response) => {\r\n\r\n      const targetableCardsResponse= await response.json();\r\n\r\n      await ensure(targetableCardsResponse);\r\n\r\n    });\r\n\r\n  }, [cardDragged])\r\n\r\n  const ensure = async (targetableCardsArg:Card[]) => {\r\n\r\n      if(targetableCardsArg.length === 0) {\r\n        setCardAffected({name: \"noCard\", points:0});\r\n      }\r\n      else {\r\n        setTargetableCards(targetableCardsArg);\r\n        setIsModalOpen(true);\r\n      }\r\n  }\r\n\r\n\r\n  const playDraggedCard = async (postURL: string, cardTargetted:Card) =>{\r\n    const args = [cardDragged, cardTargetted];\r\n    fetch(postURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(args)\r\n      }).then((res) => res.json()).then( (cardChained: Card) => {\r\n        setPlayChainCard(cardChained);\r\n        stompClient.send('/app/sendTrigger', {}, userName, userName);\r\n      });\r\n  }\r\n\r\n  const endRoundFor = (player:string) => {\r\n    fetch(`${serverURL}/Duel/endRound/${player}/${gameID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: null\r\n    }).then( () => {\r\n        stompClient.send('/app/sendEndRoundTrigger', {}, userName);\r\n    });\r\n  }\r\n  const renderWonRounds = (wonRoudnsOfPlayer: number) => {\r\n    const wonRoundsDivs = [];\r\n    for(let i = 0 ; i < wonRoudnsOfPlayer; i++) {\r\n      wonRoundsDivs.push(<div key={i}><img src=\"https://cdn-icons-png.flaticon.com/512/6941/6941697.png\" style={{width: 30, height: 30}} alt=\"\"/></div>)\r\n    }\r\n    if(wonRoundsDivs.length === 0) {\r\n      wonRoundsDivs.push(<div style={{width: 30, height: 30}} > </div>)\r\n    }\r\n    return wonRoundsDivs;\r\n  } \r\n\r\n  return (\r\n    \r\n    <div>\r\n      <div className=\"playerName\">{userName} : {pointsOnRows.reduce((sum, e) => sum + e, 0)}</div>\r\n      <div className=\"playerInfo\">\r\n        {isTurnOfPlayer1?\r\n        <div>\r\n          <label >Your turn</label>\r\n          <img src=\"https://cdn0.iconfinder.com/data/icons/crime-protection-people-rounded/110/Sword-512.png\" style={{width: 70, height: 70}} alt=\"\"/>\r\n        </div>\r\n        :\r\n        <div>\r\n          <label >Enemy turn</label>\r\n          <img src=\"https://cdn-icons-png.flaticon.com/512/1377/1377064.png\" style={{width: 70, height: 70}} alt=\"\"/>\r\n        </div>\r\n        }\r\n\r\n      </div>\r\n      <div>\r\n        <button className=\"btn\"onClick={fetchCardsData}>Load data</button>\r\n      </div>\r\n      <div style={{width: 30, height: 50}} ></div>\r\n\r\n      \r\n      <Modal isOpen={isModalOpen} onRequestClose={() => handleModalClose({name: \"\", points: 1})}style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a card to target</h2>\r\n        {targetableCards.map((card, index) =>(\r\n          <button onClick= { () => {handleModalClose(card)} }><CardComponent  name={card.name} points={card.points}></CardComponent></button>\r\n        ))}\r\n      </Modal>\r\n      <Modal isOpen={isRowsModalOpen} onRequestClose={() => handleRowsModalClose(-1)} style={{content: {width:'300px', height:'200px', background:'gray',},}}>\r\n        <h2>Choose a row to traget</h2>\r\n        {affectableRows.map((row, index) =>(\r\n          <button style={{fontSize: '30px',}} onClick= { () => {handleRowsModalClose(row)} }>{row + 1}</button>\r\n        ))}\r\n      </Modal>\r\n\r\n      <DragDropContext onDragEnd = {(result) => onDragEndOf(result, userName)}>\r\n        <HandComponent cardsInHand = {cardsInHand} cardInPlayChain={playChainCard}></HandComponent>\r\n\r\n        <RowComponent cardsOnRow = {cardsOnThirdRow} pointsOnRow={pointsOnRows[thirdRow]} rowDroppableId={thirdRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[thirdRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnSecondRow} pointsOnRow={pointsOnRows[secondRow]} rowDroppableId={secondRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[secondRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {cardsOnBoard} pointsOnRow={pointsOnRows[firstRow]} rowDroppableId={firstRowId} rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[firstRow]) ||''}></RowComponent>\r\n      </DragDropContext>  \r\n        \r\n        <div className=\"wonRounds\">\r\n          {renderWonRounds(wonRounds)}\r\n        </div>\r\n        <div className=\"boardMiddle\">\r\n          <div className=\"separator\"></div>\r\n          <div className=\"endRoundDiv\"><button className=\"endRoundButton\"onClick={() => endRoundFor(userName)}>End round</button></div>\r\n        </div>\r\n        <div className=\"wonRounds\">\r\n          {renderWonRounds(enemyWonRounds)}\r\n        </div>\r\n      \r\n      <DragDropContext onDragEnd = {() => {}}>\r\n        <RowComponent cardsOnRow = {enemyCardsOnFirstRow} pointsOnRow={enemyPointsOnRows[firstRow]} rowDroppableId={firstRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[firstRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnSecondRow} pointsOnRow={enemyPointsOnRows[secondRow]} rowDroppableId={secondRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[secondRow]) ||''}></RowComponent>\r\n        <RowComponent cardsOnRow = {enemyCardsOnThirdRow} pointsOnRow={enemyPointsOnRows[thirdRow]} rowDroppableId={thirdRowId}rowStatusImageURL={rowStatusToImageUrl.get(rowsStatus[thirdRow]) ||''}></RowComponent>\r\n      </DragDropContext>\r\n      \r\n      \r\n      <div className=\"Tag\"><div className=\"enemyName\">{enemyName} </div>: {enemyPointsOnRows.reduce((sum, e) => sum + e, 0)}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DuelPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}