{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\frontend\\\\src\\\\Game_Related_Components\\\\DeckBuildingComponents\\\\DeckBuilderPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { AllCardsDisplay } from './AllCardsDisplay';\nimport { CardsInDeckDisplay } from './CardsInDeckDisplay';\nimport { DecksManager } from './DecksManager';\nimport { MessagesComponent } from './../../Game_Unrelated_Components/UIComponents/MessagesComponent';\nimport './DeckBuilderPage.css';\nimport { useSelector } from 'react-redux';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst DeckBuilderPage = () => {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [cardsData, setCardsData] = useState([]);\n  const [cardsInDeck, setCardsInDeck] = useState([]);\n  const userName = useSelector(state => state.userName);\n  const serverURL = useSelector(state => state.serverURL);\n  const fetchCardsData = () => {\n    fetch(`http://localhost:8000/DeckBuilder/GetAllCards/${userName}`).then(res => res.json()).then(cardsData => {\n      setCardsData(cardsData);\n    }).catch(console.error);\n    fetch(`http://localhost:8000/DeckBuilder/GetCardsInDeck/${userName}`).then(res => res.json()).then(cardsInDeck => {\n      setCardsInDeck(cardsInDeck);\n    }).catch(console.error);\n    setRefresh(true);\n  };\n  useEffect(() => {\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected);\n    const controller = new AbortController();\n    // fetchCardsData();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  const onConnected = () => {\n    stompClient.subscribe('/user/' + userName + '/deckBuilderReady', fetchCardsData());\n  };\n  const ChangeDecksState = async (cardToPost, PostURL) => {\n    let data = {\n      name: cardToPost.name\n    };\n    const response = await fetch(PostURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data.name)\n    });\n    addMessage(await response.text());\n    if (!response.ok) {\n      throw new Error('Failed to change deck state');\n    }\n    fetchCardsData();\n  };\n  const addMessage = message => {\n    messages.push(message);\n    setMessages(messages);\n    setRefresh(true);\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    let PostURL = '';\n    if (destination.droppableId === \"AllCards\") {\n      PostURL = `http://localhost:8000/DeckBuilder/PutCardFromDeckBack/${userName}`;\n    } else if (destination.droppableId === \"CardsInDeck\") {\n      PostURL = `http://localhost:8000/DeckBuilder/PutCardToDeck/${userName}`;\n    }\n    let cardDragged = {\n      name: result.draggableId,\n      points: 0\n    };\n    ChangeDecksState(cardDragged, PostURL);\n  };\n  const handleDecksSwitch = () => {\n    fetchCardsData();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DeckBuilderPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DeckBuilderPage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Decks\",\n      children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"AllCards\",\n          children: /*#__PURE__*/_jsxDEV(AllCardsDisplay, {\n            Cards: cardsData,\n            refresh: refresh\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"AllCardsInDeck\",\n          children: /*#__PURE__*/_jsxDEV(CardsInDeckDisplay, {\n            Cards: cardsInDeck,\n            refresh: refresh\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PlayersDecks\",\n        children: /*#__PURE__*/_jsxDEV(DecksManager, {\n          OnDecksSwitched: handleDecksSwitch,\n          addMessage: addMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Messages\",\n      children: /*#__PURE__*/_jsxDEV(MessagesComponent, {\n        Messages: messages,\n        refresh: refresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(DeckBuilderPage, \"1L+n3dfw7b7rScr9z/ySh4byRlg=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = DeckBuilderPage;\nexport default DeckBuilderPage;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilderPage\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","AllCardsDisplay","CardsInDeckDisplay","DecksManager","MessagesComponent","useSelector","SockJS","over","jsxDEV","_jsxDEV","stompClient","DeckBuilderPage","_s","refresh","setRefresh","messages","setMessages","cardsData","setCardsData","cardsInDeck","setCardsInDeck","userName","state","serverURL","fetchCardsData","fetch","then","res","json","catch","console","error","Sock","connect","onConnected","controller","AbortController","abort","subscribe","ChangeDecksState","cardToPost","PostURL","data","name","response","method","headers","body","JSON","stringify","addMessage","text","ok","Error","message","push","onDragEnd","result","source","destination","droppableId","index","cardDragged","draggableId","points","handleDecksSwitch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Cards","OnDecksSwitched","Messages","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/frontend/src/Game_Related_Components/DeckBuildingComponents/DeckBuilderPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport {AllCardsDisplay} from './AllCardsDisplay';\r\nimport {CardsInDeckDisplay} from './CardsInDeckDisplay';\r\nimport {DecksManager} from './DecksManager';\r\nimport {Card} from './../Interfaces/Card';\r\nimport {MessagesComponent} from './../../Game_Unrelated_Components/UIComponents/MessagesComponent';\r\nimport  './DeckBuilderPage.css';\r\nimport {useSelector} from 'react-redux';\r\nimport StateData from './../../Game_Unrelated_Components/reactRedux/reducer';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\n\r\nvar stompClient:any = null;\r\nconst DeckBuilderPage = () => {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [messages, setMessages] = useState<string[]>([]);\r\n  const [cardsData, setCardsData] = useState<Card[]>([]);\r\n  const [cardsInDeck, setCardsInDeck] = useState<Card[]>([]);\r\n\r\n\r\n  const userName = useSelector<StateData, string>((state) => state.userName);\r\n  const serverURL = useSelector<StateData, string>((state) => state.serverURL);\r\n\r\n  const fetchCardsData = () => {\r\n    fetch(`http://localhost:8000/DeckBuilder/GetAllCards/${userName}`)\r\n      .then((res) => res.json())\r\n      .then((cardsData: Card[]) => {\r\n        setCardsData(cardsData);\r\n      })\r\n      .catch(console.error);\r\n\r\n      fetch(`http://localhost:8000/DeckBuilder/GetCardsInDeck/${userName}`)\r\n      .then((res) => res.json())\r\n      .then((cardsInDeck: Card[]) => {\r\n        setCardsInDeck(cardsInDeck);\r\n      })\r\n      .catch(console.error);\r\n\r\n      setRefresh(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let Sock=new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected);\r\n\r\n    const controller = new AbortController();\r\n    // fetchCardsData();\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  const onConnected = () => {\r\n    stompClient.subscribe('/user/' + userName + '/deckBuilderReady', fetchCardsData());\r\n  }\r\n\r\n  const ChangeDecksState = async (cardToPost: Card, PostURL: string) =>{\r\n    let data = {name: cardToPost.name};\r\n    const response = await fetch(PostURL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data.name)\r\n    });\r\n\r\n    \r\n    addMessage(await response.text());\r\n\r\n    if(!response.ok){\r\n      throw new Error('Failed to change deck state');\r\n    }\r\n\r\n    fetchCardsData();\r\n  };\r\n\r\n  const addMessage = (message: string) => {\r\n    messages.push(message);\r\n    setMessages(messages);\r\n    setRefresh(true);\r\n  }\r\n\r\n  const onDragEnd = (result:DropResult) => {\r\n    const {source, destination} = result;\r\n    \r\n    if(!destination){return;}\r\n    if(destination.droppableId === source.droppableId && destination.index === source.index){return;}\r\n\r\n    let PostURL:string = '';\r\n\r\n    if(destination.droppableId === \"AllCards\"){\r\n      PostURL = `http://localhost:8000/DeckBuilder/PutCardFromDeckBack/${userName}`;\r\n    }\r\n    else if(destination.droppableId === \"CardsInDeck\"){\r\n      PostURL = `http://localhost:8000/DeckBuilder/PutCardToDeck/${userName}`\r\n    }\r\n\r\n    let cardDragged: Card = {name: result.draggableId, points: 0};\r\n    \r\n    ChangeDecksState(cardDragged, PostURL); \r\n  }\r\n\r\n  const handleDecksSwitch = () => {\r\n    fetchCardsData();\r\n  }\r\n\r\n  return (\r\n    <div className=\"DeckBuilderPage\">\r\n      <h2>DeckBuilderPage</h2>\r\n\r\n      \r\n\r\n      <div className=\"Decks\">\r\n\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div className = \"AllCards\">\r\n            <AllCardsDisplay Cards={cardsData} refresh={refresh}></AllCardsDisplay>\r\n          </div>\r\n          <div className = \"AllCardsInDeck\">\r\n            <CardsInDeckDisplay Cards={cardsInDeck} refresh={refresh}></CardsInDeckDisplay>\r\n          </div>\r\n        </DragDropContext>\r\n        <div className=\"PlayersDecks\">\r\n          <DecksManager OnDecksSwitched={handleDecksSwitch} addMessage={addMessage}></DecksManager>\r\n        </div>\r\n      </div>\r\n      <div className=\"Messages\">\r\n        <MessagesComponent Messages = {messages} refresh={refresh}></MessagesComponent>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckBuilderPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}